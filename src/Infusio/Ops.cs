//----------------------
// <auto-generated>
// </auto-generated>
//----------------------
using System;
using LanguageExt;
using Infusio.Model;

namespace Infusio.Ops
{
    public abstract class InfusioOp<A>
    {
        internal class Return : InfusioOp<A>
        {
            public readonly A Value;
            public Return(A value) => Value = value;
        }


        internal class GetAccountProfile : InfusioOp<A>
        {
            public readonly Func<AccountProfile, InfusioOp<A>> Next;

            public GetAccountProfile(Func<AccountProfile, InfusioOp<A>> next)
            {
                Next = next;
            }
        }

        internal class SearchCommissions : InfusioOp<A>
        {
            public readonly Func<AffiliateCommissionList, InfusioOp<A>> Next;
            public readonly long? AffiliateId;
            public readonly int? Offset;
            public readonly int? Limit;
            public readonly string Until;
            public readonly string Since;

            public SearchCommissions(Func<AffiliateCommissionList, InfusioOp<A>> next, long? affiliateId, int? offset, int? limit, string until, string since)
            {
                Next = next;
                AffiliateId = affiliateId;
                Offset = offset;
                Limit = limit;
                Until = until;
                Since = since;
            }
        }

        internal class RetrieveAffiliateModel : InfusioOp<A>
        {
            public readonly Func<ObjectModel, InfusioOp<A>> Next;

            public RetrieveAffiliateModel(Func<ObjectModel, InfusioOp<A>> next)
            {
                Next = next;
            }
        }

        internal class ListAppointments : InfusioOp<A>
        {
            public readonly Func<AppointmentList, InfusioOp<A>> Next;
            public readonly long? ContactId;
            public readonly int? Offset;
            public readonly int? Limit;
            public readonly string Until;
            public readonly string Since;

            public ListAppointments(Func<AppointmentList, InfusioOp<A>> next, long? contactId, int? offset, int? limit, string until, string since)
            {
                Next = next;
                ContactId = contactId;
                Offset = offset;
                Limit = limit;
                Until = until;
                Since = since;
            }
        }

        internal class RetrieveAppointmentModel : InfusioOp<A>
        {
            public readonly Func<ObjectModel, InfusioOp<A>> Next;

            public RetrieveAppointmentModel(Func<ObjectModel, InfusioOp<A>> next)
            {
                Next = next;
            }
        }

        internal class GetAppointment : InfusioOp<A>
        {
            public readonly Func<Appointment, InfusioOp<A>> Next;
            public readonly long? AppointmentId;

            public GetAppointment(Func<Appointment, InfusioOp<A>> next, long? appointmentId)
            {
                Next = next;
                AppointmentId = appointmentId;
            }
        }

        internal class ListCampaigns : InfusioOp<A>
        {
            public readonly Func<CampaignList, InfusioOp<A>> Next;
            public readonly string OrderDirection;
            public readonly string Order;
            public readonly string SearchText;
            public readonly int? Offset;
            public readonly int? Limit;

            public ListCampaigns(Func<CampaignList, InfusioOp<A>> next, string orderDirection, string order, string searchText, int? offset, int? limit)
            {
                Next = next;
                OrderDirection = orderDirection;
                Order = order;
                SearchText = searchText;
                Offset = offset;
                Limit = limit;
            }
        }

        internal class GetCampaign : InfusioOp<A>
        {
            public readonly Func<Campaign, InfusioOp<A>> Next;
            public readonly long? CampaignId;
            public readonly Lst<string> OptionalProperties;

            public GetCampaign(Func<Campaign, InfusioOp<A>> next, long? campaignId, Lst<string> optionalProperties)
            {
                Next = next;
                CampaignId = campaignId;
                OptionalProperties = optionalProperties;
            }
        }

        internal class AddContactsToCampaignSequence : InfusioOp<A>
        {
            public readonly Func<Unit, InfusioOp<A>> Next;
            public readonly Model.SetOfIds Ids;
            public readonly long? SequenceId;
            public readonly long? CampaignId;

            public AddContactsToCampaignSequence(Func<Unit, InfusioOp<A>> next, Model.SetOfIds ids, long? sequenceId, long? campaignId)
            {
                Next = next;
                Ids = ids;
                SequenceId = sequenceId;
                CampaignId = campaignId;
            }
        }

        internal class AddContactToCampaignSequence : InfusioOp<A>
        {
            public readonly Func<Unit, InfusioOp<A>> Next;
            public readonly long? ContactId;
            public readonly long? SequenceId;
            public readonly long? CampaignId;

            public AddContactToCampaignSequence(Func<Unit, InfusioOp<A>> next, long? contactId, long? sequenceId, long? campaignId)
            {
                Next = next;
                ContactId = contactId;
                SequenceId = sequenceId;
                CampaignId = campaignId;
            }
        }

        internal class ListCompanies : InfusioOp<A>
        {
            public readonly Func<CompanyList, InfusioOp<A>> Next;
            public readonly Lst<string> OptionalProperties;
            public readonly string OrderDirection;
            public readonly string Order;
            public readonly string CompanyName;
            public readonly int? Offset;
            public readonly int? Limit;

            public ListCompanies(Func<CompanyList, InfusioOp<A>> next, Lst<string> optionalProperties, string orderDirection, string order, string companyName, int? offset, int? limit)
            {
                Next = next;
                OptionalProperties = optionalProperties;
                OrderDirection = orderDirection;
                Order = order;
                CompanyName = companyName;
                Offset = offset;
                Limit = limit;
            }
        }

        internal class RetrieveCompanyModel : InfusioOp<A>
        {
            public readonly Func<ObjectModel, InfusioOp<A>> Next;

            public RetrieveCompanyModel(Func<ObjectModel, InfusioOp<A>> next)
            {
                Next = next;
            }
        }

        internal class ListContacts : InfusioOp<A>
        {
            public readonly Func<ContactList, InfusioOp<A>> Next;
            public readonly string OrderDirection;
            public readonly string Order;
            public readonly string FamilyName;
            public readonly string GivenName;
            public readonly string Email;
            public readonly int? Offset;
            public readonly int? Limit;

            public ListContacts(Func<ContactList, InfusioOp<A>> next, string orderDirection, string order, string familyName, string givenName, string email, int? offset, int? limit)
            {
                Next = next;
                OrderDirection = orderDirection;
                Order = order;
                FamilyName = familyName;
                GivenName = givenName;
                Email = email;
                Offset = offset;
                Limit = limit;
            }
        }

        internal class RetrieveContactModel : InfusioOp<A>
        {
            public readonly Func<ObjectModel, InfusioOp<A>> Next;

            public RetrieveContactModel(Func<ObjectModel, InfusioOp<A>> next)
            {
                Next = next;
            }
        }

        internal class DeleteContact : InfusioOp<A>
        {
            public readonly Func<Unit, InfusioOp<A>> Next;
            public readonly long? ContactId;

            public DeleteContact(Func<Unit, InfusioOp<A>> next, long? contactId)
            {
                Next = next;
                ContactId = contactId;
            }
        }

        internal class CreateCreditCard : InfusioOp<A>
        {
            public readonly Func<CreditCardAdded, InfusioOp<A>> Next;
            public readonly long? ContactId;
            public readonly Model.CreditCard CreditCard;

            public CreateCreditCard(Func<CreditCardAdded, InfusioOp<A>> next, long? contactId, Model.CreditCard creditCard)
            {
                Next = next;
                ContactId = contactId;
                CreditCard = creditCard;
            }
        }

        internal class ListEmailsForContact : InfusioOp<A>
        {
            public readonly Func<EmailSentQueryResultList, InfusioOp<A>> Next;
            public readonly long? ContactId;
            public readonly string Email;
            public readonly long? ContactId2;
            public readonly int? Offset;
            public readonly int? Limit;

            public ListEmailsForContact(Func<EmailSentQueryResultList, InfusioOp<A>> next, long? contactId, string email, long? contactId2, int? offset, int? limit)
            {
                Next = next;
                ContactId = contactId;
                Email = email;
                ContactId2 = contactId2;
                Offset = offset;
                Limit = limit;
            }
        }

        internal class ListAppliedTags : InfusioOp<A>
        {
            public readonly Func<ContactTagList, InfusioOp<A>> Next;
            public readonly long? ContactId;
            public readonly int? Offset;
            public readonly int? Limit;

            public ListAppliedTags(Func<ContactTagList, InfusioOp<A>> next, long? contactId, int? offset, int? limit)
            {
                Next = next;
                ContactId = contactId;
                Offset = offset;
                Limit = limit;
            }
        }

        internal class RemoveTagsFromContact : InfusioOp<A>
        {
            public readonly Func<Unit, InfusioOp<A>> Next;
            public readonly long? TagId;
            public readonly long? ContactId;

            public RemoveTagsFromContact(Func<Unit, InfusioOp<A>> next, long? tagId, long? contactId)
            {
                Next = next;
                TagId = tagId;
                ContactId = contactId;
            }
        }

        internal class GetContact : InfusioOp<A>
        {
            public readonly Func<FullContact, InfusioOp<A>> Next;
            public readonly long? Id;
            public readonly Lst<string> OptionalProperties;

            public GetContact(Func<FullContact, InfusioOp<A>> next, long? id, Lst<string> optionalProperties)
            {
                Next = next;
                Id = id;
                OptionalProperties = optionalProperties;
            }
        }

        internal class ListEmails : InfusioOp<A>
        {
            public readonly Func<EmailSentQueryResultList, InfusioOp<A>> Next;
            public readonly string Email;
            public readonly long? ContactId;
            public readonly int? Offset;
            public readonly int? Limit;

            public ListEmails(Func<EmailSentQueryResultList, InfusioOp<A>> next, string email, long? contactId, int? offset, int? limit)
            {
                Next = next;
                Email = email;
                ContactId = contactId;
                Offset = offset;
                Limit = limit;
            }
        }

        internal class CreateEmails : InfusioOp<A>
        {
            public readonly Func<EmailSentCreateList, InfusioOp<A>> Next;
            public readonly Model.EmailSentCreateList EmailWithContent;

            public CreateEmails(Func<EmailSentCreateList, InfusioOp<A>> next, Model.EmailSentCreateList emailWithContent)
            {
                Next = next;
                EmailWithContent = emailWithContent;
            }
        }

        internal class DeleteEmails : InfusioOp<A>
        {
            public readonly Func<Unit, InfusioOp<A>> Next;
            public readonly Model.SetOfIds EmailIds;

            public DeleteEmails(Func<Unit, InfusioOp<A>> next, Model.SetOfIds emailIds)
            {
                Next = next;
                EmailIds = emailIds;
            }
        }

        internal class GetEmail : InfusioOp<A>
        {
            public readonly Func<EmailSentQueryResultWithContent, InfusioOp<A>> Next;
            public readonly long? Id;

            public GetEmail(Func<EmailSentQueryResultWithContent, InfusioOp<A>> next, long? id)
            {
                Next = next;
                Id = id;
            }
        }

        internal class ListFiles : InfusioOp<A>
        {
            public readonly Func<FileList, InfusioOp<A>> Next;
            public readonly string Name;
            public readonly string Type;
            public readonly string Permission;
            public readonly string Viewable;
            public readonly int? Offset;
            public readonly int? Limit;

            public ListFiles(Func<FileList, InfusioOp<A>> next, string name, string type, string permission, string viewable, int? offset, int? limit)
            {
                Next = next;
                Name = name;
                Type = type;
                Permission = permission;
                Viewable = viewable;
                Offset = offset;
                Limit = limit;
            }
        }

        internal class GetFile : InfusioOp<A>
        {
            public readonly Func<FileInformation, InfusioOp<A>> Next;
            public readonly long? FileId;
            public readonly Lst<string> OptionalProperties;

            public GetFile(Func<FileInformation, InfusioOp<A>> next, long? fileId, Lst<string> optionalProperties)
            {
                Next = next;
                FileId = fileId;
                OptionalProperties = optionalProperties;
            }
        }

        internal class ListStoredHookSubscriptions : InfusioOp<A>
        {
            public readonly Func<Unit, InfusioOp<A>> Next;

            public ListStoredHookSubscriptions(Func<Unit, InfusioOp<A>> next)
            {
                Next = next;
            }
        }

        internal class ListHookEventTypes : InfusioOp<A>
        {
            public readonly Func<Unit, InfusioOp<A>> Next;

            public ListHookEventTypes(Func<Unit, InfusioOp<A>> next)
            {
                Next = next;
            }
        }

        internal class RetrieveAHookSubscription : InfusioOp<A>
        {
            public readonly Func<RestHook, InfusioOp<A>> Next;
            public readonly string Key;

            public RetrieveAHookSubscription(Func<RestHook, InfusioOp<A>> next, string key)
            {
                Next = next;
                Key = key;
            }
        }

        internal class VerifyAHookSubscriptionDelayed : InfusioOp<A>
        {
            public readonly Func<RestHook, InfusioOp<A>> Next;
            public readonly string XHookSecret;
            public readonly string Key;

            public VerifyAHookSubscriptionDelayed(Func<RestHook, InfusioOp<A>> next, string xHookSecret, string key)
            {
                Next = next;
                XHookSecret = xHookSecret;
                Key = key;
            }
        }

        internal class VerifyAHookSubscription : InfusioOp<A>
        {
            public readonly Func<RestHook, InfusioOp<A>> Next;
            public readonly string Key;

            public VerifyAHookSubscription(Func<RestHook, InfusioOp<A>> next, string key)
            {
                Next = next;
                Key = key;
            }
        }

        internal class GetUserInfo : InfusioOp<A>
        {
            public readonly Func<UserInfoDTO, InfusioOp<A>> Next;

            public GetUserInfo(Func<UserInfoDTO, InfusioOp<A>> next)
            {
                Next = next;
            }
        }

        internal class ListOpportunities : InfusioOp<A>
        {
            public readonly Func<OpportunityList, InfusioOp<A>> Next;
            public readonly string Order;
            public readonly string SearchTerm;
            public readonly long? StageId;
            public readonly long? UserId;
            public readonly int? Offset;
            public readonly int? Limit;

            public ListOpportunities(Func<OpportunityList, InfusioOp<A>> next, string order, string searchTerm, long? stageId, long? userId, int? offset, int? limit)
            {
                Next = next;
                Order = order;
                SearchTerm = searchTerm;
                StageId = stageId;
                UserId = userId;
                Offset = offset;
                Limit = limit;
            }
        }

        internal class RetrieveOpportunityModel : InfusioOp<A>
        {
            public readonly Func<ObjectModel, InfusioOp<A>> Next;

            public RetrieveOpportunityModel(Func<ObjectModel, InfusioOp<A>> next)
            {
                Next = next;
            }
        }

        internal class GetOpportunity : InfusioOp<A>
        {
            public readonly Func<Opportunity, InfusioOp<A>> Next;
            public readonly long? OpportunityId;
            public readonly Lst<string> OptionalProperties;

            public GetOpportunity(Func<Opportunity, InfusioOp<A>> next, long? opportunityId, Lst<string> optionalProperties)
            {
                Next = next;
                OpportunityId = opportunityId;
                OptionalProperties = optionalProperties;
            }
        }

        internal class ListOpportunityStagePipelines : InfusioOp<A>
        {
            public readonly Func<Unit, InfusioOp<A>> Next;

            public ListOpportunityStagePipelines(Func<Unit, InfusioOp<A>> next)
            {
                Next = next;
            }
        }

        internal class ListOrders : InfusioOp<A>
        {
            public readonly Func<OrderList, InfusioOp<A>> Next;
            public readonly long? ProductId;
            public readonly long? ContactId;
            public readonly string Order;
            public readonly bool Paid;
            public readonly int? Offset;
            public readonly int? Limit;
            public readonly string Until;
            public readonly string Since;

            public ListOrders(Func<OrderList, InfusioOp<A>> next, long? productId, long? contactId, string order, bool paid, int? offset, int? limit, string until, string since)
            {
                Next = next;
                ProductId = productId;
                ContactId = contactId;
                Order = order;
                Paid = paid;
                Offset = offset;
                Limit = limit;
                Until = until;
                Since = since;
            }
        }

        internal class RetrieveOrderModel : InfusioOp<A>
        {
            public readonly Func<ObjectModel, InfusioOp<A>> Next;

            public RetrieveOrderModel(Func<ObjectModel, InfusioOp<A>> next)
            {
                Next = next;
            }
        }

        internal class GetOrder : InfusioOp<A>
        {
            public readonly Func<Order, InfusioOp<A>> Next;
            public readonly long? OrderId;

            public GetOrder(Func<Order, InfusioOp<A>> next, long? orderId)
            {
                Next = next;
                OrderId = orderId;
            }
        }

        internal class ListTransactionsForOrder : InfusioOp<A>
        {
            public readonly Func<TransactionList, InfusioOp<A>> Next;
            public readonly long? OrderId;
            public readonly long? ContactId;
            public readonly int? Offset;
            public readonly int? Limit;
            public readonly string Until;
            public readonly string Since;

            public ListTransactionsForOrder(Func<TransactionList, InfusioOp<A>> next, long? orderId, long? contactId, int? offset, int? limit, string until, string since)
            {
                Next = next;
                OrderId = orderId;
                ContactId = contactId;
                Offset = offset;
                Limit = limit;
                Until = until;
                Since = since;
            }
        }

        internal class ListProducts : InfusioOp<A>
        {
            public readonly Func<ProductList, InfusioOp<A>> Next;
            public readonly bool Active;
            public readonly int? Offset;
            public readonly int? Limit;

            public ListProducts(Func<ProductList, InfusioOp<A>> next, bool active, int? offset, int? limit)
            {
                Next = next;
                Active = active;
                Offset = offset;
                Limit = limit;
            }
        }

        internal class ListProductsFromSyncToken : InfusioOp<A>
        {
            public readonly Func<ProductStatusList, InfusioOp<A>> Next;
            public readonly int? Offset;
            public readonly int? Limit;
            public readonly string SyncToken;

            public ListProductsFromSyncToken(Func<ProductStatusList, InfusioOp<A>> next, int? offset, int? limit, string syncToken)
            {
                Next = next;
                Offset = offset;
                Limit = limit;
                SyncToken = syncToken;
            }
        }

        internal class GetProduct : InfusioOp<A>
        {
            public readonly Func<Product, InfusioOp<A>> Next;
            public readonly long? ProductId;

            public GetProduct(Func<Product, InfusioOp<A>> next, long? productId)
            {
                Next = next;
                ProductId = productId;
            }
        }

        internal class GetApplicationEnabled : InfusioOp<A>
        {
            public readonly Func<Setting, InfusioOp<A>> Next;

            public GetApplicationEnabled(Func<Setting, InfusioOp<A>> next)
            {
                Next = next;
            }
        }

        internal class GetContactOptionTypes : InfusioOp<A>
        {
            public readonly Func<Setting, InfusioOp<A>> Next;

            public GetContactOptionTypes(Func<Setting, InfusioOp<A>> next)
            {
                Next = next;
            }
        }

        internal class RetrieveSubscriptionModel : InfusioOp<A>
        {
            public readonly Func<ObjectModel, InfusioOp<A>> Next;

            public RetrieveSubscriptionModel(Func<ObjectModel, InfusioOp<A>> next)
            {
                Next = next;
            }
        }

        internal class ListTags : InfusioOp<A>
        {
            public readonly Func<Tags, InfusioOp<A>> Next;
            public readonly long? Category;
            public readonly int? Offset;
            public readonly int? Limit;

            public ListTags(Func<Tags, InfusioOp<A>> next, long? category, int? offset, int? limit)
            {
                Next = next;
                Category = category;
                Offset = offset;
                Limit = limit;
            }
        }

        internal class CreateTagCategory : InfusioOp<A>
        {
            public readonly Func<TagCategory, InfusioOp<A>> Next;
            public readonly Model.CreateTagCategory TagCategory;

            public CreateTagCategory(Func<TagCategory, InfusioOp<A>> next, Model.CreateTagCategory tagCategory)
            {
                Next = next;
                TagCategory = tagCategory;
            }
        }

        internal class GetTag : InfusioOp<A>
        {
            public readonly Func<Tag, InfusioOp<A>> Next;
            public readonly long? Id;

            public GetTag(Func<Tag, InfusioOp<A>> next, long? id)
            {
                Next = next;
                Id = id;
            }
        }

        internal class ListContactsForTagId : InfusioOp<A>
        {
            public readonly Func<TaggedContactList, InfusioOp<A>> Next;
            public readonly long? TagId;
            public readonly int? Offset;
            public readonly int? Limit;

            public ListContactsForTagId(Func<TaggedContactList, InfusioOp<A>> next, long? tagId, int? offset, int? limit)
            {
                Next = next;
                TagId = tagId;
                Offset = offset;
                Limit = limit;
            }
        }

        internal class RemoveTagFromContactId : InfusioOp<A>
        {
            public readonly Func<Unit, InfusioOp<A>> Next;
            public readonly long? ContactId;
            public readonly long? TagId;

            public RemoveTagFromContactId(Func<Unit, InfusioOp<A>> next, long? contactId, long? tagId)
            {
                Next = next;
                ContactId = contactId;
                TagId = tagId;
            }
        }

        internal class ListTasks : InfusioOp<A>
        {
            public readonly Func<TaskList, InfusioOp<A>> Next;
            public readonly string Order;
            public readonly int? Offset;
            public readonly int? Limit;
            public readonly bool Completed;
            public readonly string Until;
            public readonly string Since;
            public readonly long? UserId;
            public readonly bool HasDueDate;
            public readonly long? ContactId;

            public ListTasks(Func<TaskList, InfusioOp<A>> next, string order, int? offset, int? limit, bool completed, string until, string since, long? userId, bool hasDueDate, long? contactId)
            {
                Next = next;
                Order = order;
                Offset = offset;
                Limit = limit;
                Completed = completed;
                Until = until;
                Since = since;
                UserId = userId;
                HasDueDate = hasDueDate;
                ContactId = contactId;
            }
        }

        internal class RetrieveTaskModel : InfusioOp<A>
        {
            public readonly Func<ObjectModel, InfusioOp<A>> Next;

            public RetrieveTaskModel(Func<ObjectModel, InfusioOp<A>> next)
            {
                Next = next;
            }
        }

        internal class ListTasksForCurrentUser : InfusioOp<A>
        {
            public readonly Func<TaskList, InfusioOp<A>> Next;
            public readonly string Order;
            public readonly int? Offset;
            public readonly int? Limit;
            public readonly bool Completed;
            public readonly string Until;
            public readonly string Since;
            public readonly long? UserId;
            public readonly bool HasDueDate;
            public readonly long? ContactId;

            public ListTasksForCurrentUser(Func<TaskList, InfusioOp<A>> next, string order, int? offset, int? limit, bool completed, string until, string since, long? userId, bool hasDueDate, long? contactId)
            {
                Next = next;
                Order = order;
                Offset = offset;
                Limit = limit;
                Completed = completed;
                Until = until;
                Since = since;
                UserId = userId;
                HasDueDate = hasDueDate;
                ContactId = contactId;
            }
        }

        internal class GetTask : InfusioOp<A>
        {
            public readonly Func<InfusionTask, InfusioOp<A>> Next;
            public readonly string TaskId;

            public GetTask(Func<InfusionTask, InfusioOp<A>> next, string taskId)
            {
                Next = next;
                TaskId = taskId;
            }
        }

        internal class ListTransactions : InfusioOp<A>
        {
            public readonly Func<TransactionList, InfusioOp<A>> Next;
            public readonly long? ContactId;
            public readonly int? Offset;
            public readonly int? Limit;
            public readonly string Until;
            public readonly string Since;

            public ListTransactions(Func<TransactionList, InfusioOp<A>> next, long? contactId, int? offset, int? limit, string until, string since)
            {
                Next = next;
                ContactId = contactId;
                Offset = offset;
                Limit = limit;
                Until = until;
                Since = since;
            }
        }

        internal class GetTransaction : InfusioOp<A>
        {
            public readonly Func<Transaction, InfusioOp<A>> Next;
            public readonly long? TransactionId;

            public GetTransaction(Func<Transaction, InfusioOp<A>> next, long? transactionId)
            {
                Next = next;
                TransactionId = transactionId;
            }
        }
    }

    public static class InfusioOpExtensions
    {
        public static InfusioOp<B> Map<A, B>(this InfusioOp<A> op, Func<A, B> fn) =>
            op.Bind(a => Dsl.Return(fn(a)));

        public static InfusioOp<B> Select<A, B>(this InfusioOp<A> op, Func<A, B> fn) =>
            op.Bind(a => Dsl.Return(fn(a)));

        public static InfusioOp<C> SelectMany<A, B, C>(this InfusioOp<A> op, Func<A, InfusioOp<B>> bind, Func<A, B, C> project) =>
            op.Bind(a => bind(a).Select(b => project(a, b)));

        static InfusioOp<B> Bind<A, B>(this InfusioOp<A> op, Func<A, InfusioOp<B>> fn) =>
            op is InfusioOp<A>.Return rt ? fn(rt.Value) :
            op is InfusioOp<A>.GetAccountProfile _1 ? new InfusioOp<B>.GetAccountProfile(x => _1.Next(x).Bind(fn)) :
            op is InfusioOp<A>.SearchCommissions _2 ? new InfusioOp<B>.SearchCommissions(x => _2.Next(x).Bind(fn), _2.AffiliateId, _2.Offset, _2.Limit, _2.Until, _2.Since) :
            op is InfusioOp<A>.RetrieveAffiliateModel _3 ? new InfusioOp<B>.RetrieveAffiliateModel(x => _3.Next(x).Bind(fn)) :
            op is InfusioOp<A>.ListAppointments _4 ? new InfusioOp<B>.ListAppointments(x => _4.Next(x).Bind(fn), _4.ContactId, _4.Offset, _4.Limit, _4.Until, _4.Since) :
            op is InfusioOp<A>.RetrieveAppointmentModel _5 ? new InfusioOp<B>.RetrieveAppointmentModel(x => _5.Next(x).Bind(fn)) :
            op is InfusioOp<A>.GetAppointment _6 ? new InfusioOp<B>.GetAppointment(x => _6.Next(x).Bind(fn), _6.AppointmentId) :
            op is InfusioOp<A>.ListCampaigns _7 ? new InfusioOp<B>.ListCampaigns(x => _7.Next(x).Bind(fn), _7.OrderDirection, _7.Order, _7.SearchText, _7.Offset, _7.Limit) :
            op is InfusioOp<A>.GetCampaign _8 ? new InfusioOp<B>.GetCampaign(x => _8.Next(x).Bind(fn), _8.CampaignId, _8.OptionalProperties) :
            op is InfusioOp<A>.AddContactsToCampaignSequence _9 ? new InfusioOp<B>.AddContactsToCampaignSequence(x => _9.Next(x).Bind(fn), _9.Ids, _9.SequenceId, _9.CampaignId) :
            op is InfusioOp<A>.AddContactToCampaignSequence _10 ? new InfusioOp<B>.AddContactToCampaignSequence(x => _10.Next(x).Bind(fn), _10.ContactId, _10.SequenceId, _10.CampaignId) :
            op is InfusioOp<A>.ListCompanies _11 ? new InfusioOp<B>.ListCompanies(x => _11.Next(x).Bind(fn), _11.OptionalProperties, _11.OrderDirection, _11.Order, _11.CompanyName, _11.Offset, _11.Limit) :
            op is InfusioOp<A>.RetrieveCompanyModel _12 ? new InfusioOp<B>.RetrieveCompanyModel(x => _12.Next(x).Bind(fn)) :
            op is InfusioOp<A>.ListContacts _13 ? new InfusioOp<B>.ListContacts(x => _13.Next(x).Bind(fn), _13.OrderDirection, _13.Order, _13.FamilyName, _13.GivenName, _13.Email, _13.Offset, _13.Limit) :
            op is InfusioOp<A>.RetrieveContactModel _14 ? new InfusioOp<B>.RetrieveContactModel(x => _14.Next(x).Bind(fn)) :
            op is InfusioOp<A>.DeleteContact _15 ? new InfusioOp<B>.DeleteContact(x => _15.Next(x).Bind(fn), _15.ContactId) :
            op is InfusioOp<A>.CreateCreditCard _16 ? new InfusioOp<B>.CreateCreditCard(x => _16.Next(x).Bind(fn), _16.ContactId, _16.CreditCard) :
            op is InfusioOp<A>.ListEmailsForContact _17 ? new InfusioOp<B>.ListEmailsForContact(x => _17.Next(x).Bind(fn), _17.ContactId, _17.Email, _17.ContactId2, _17.Offset, _17.Limit) :
            op is InfusioOp<A>.ListAppliedTags _18 ? new InfusioOp<B>.ListAppliedTags(x => _18.Next(x).Bind(fn), _18.ContactId, _18.Offset, _18.Limit) :
            op is InfusioOp<A>.RemoveTagsFromContact _19 ? new InfusioOp<B>.RemoveTagsFromContact(x => _19.Next(x).Bind(fn), _19.TagId, _19.ContactId) :
            op is InfusioOp<A>.GetContact _20 ? new InfusioOp<B>.GetContact(x => _20.Next(x).Bind(fn), _20.Id, _20.OptionalProperties) :
            op is InfusioOp<A>.ListEmails _21 ? new InfusioOp<B>.ListEmails(x => _21.Next(x).Bind(fn), _21.Email, _21.ContactId, _21.Offset, _21.Limit) :
            op is InfusioOp<A>.CreateEmails _22 ? new InfusioOp<B>.CreateEmails(x => _22.Next(x).Bind(fn), _22.EmailWithContent) :
            op is InfusioOp<A>.DeleteEmails _23 ? new InfusioOp<B>.DeleteEmails(x => _23.Next(x).Bind(fn), _23.EmailIds) :
            op is InfusioOp<A>.GetEmail _24 ? new InfusioOp<B>.GetEmail(x => _24.Next(x).Bind(fn), _24.Id) :
            op is InfusioOp<A>.ListFiles _25 ? new InfusioOp<B>.ListFiles(x => _25.Next(x).Bind(fn), _25.Name, _25.Type, _25.Permission, _25.Viewable, _25.Offset, _25.Limit) :
            op is InfusioOp<A>.GetFile _26 ? new InfusioOp<B>.GetFile(x => _26.Next(x).Bind(fn), _26.FileId, _26.OptionalProperties) :
            op is InfusioOp<A>.ListStoredHookSubscriptions _27 ? new InfusioOp<B>.ListStoredHookSubscriptions(x => _27.Next(x).Bind(fn)) :
            op is InfusioOp<A>.ListHookEventTypes _28 ? new InfusioOp<B>.ListHookEventTypes(x => _28.Next(x).Bind(fn)) :
            op is InfusioOp<A>.RetrieveAHookSubscription _29 ? new InfusioOp<B>.RetrieveAHookSubscription(x => _29.Next(x).Bind(fn), _29.Key) :
            op is InfusioOp<A>.VerifyAHookSubscriptionDelayed _30 ? new InfusioOp<B>.VerifyAHookSubscriptionDelayed(x => _30.Next(x).Bind(fn), _30.XHookSecret, _30.Key) :
            op is InfusioOp<A>.VerifyAHookSubscription _31 ? new InfusioOp<B>.VerifyAHookSubscription(x => _31.Next(x).Bind(fn), _31.Key) :
            op is InfusioOp<A>.GetUserInfo _32 ? new InfusioOp<B>.GetUserInfo(x => _32.Next(x).Bind(fn)) :
            op is InfusioOp<A>.ListOpportunities _33 ? new InfusioOp<B>.ListOpportunities(x => _33.Next(x).Bind(fn), _33.Order, _33.SearchTerm, _33.StageId, _33.UserId, _33.Offset, _33.Limit) :
            op is InfusioOp<A>.RetrieveOpportunityModel _34 ? new InfusioOp<B>.RetrieveOpportunityModel(x => _34.Next(x).Bind(fn)) :
            op is InfusioOp<A>.GetOpportunity _35 ? new InfusioOp<B>.GetOpportunity(x => _35.Next(x).Bind(fn), _35.OpportunityId, _35.OptionalProperties) :
            op is InfusioOp<A>.ListOpportunityStagePipelines _36 ? new InfusioOp<B>.ListOpportunityStagePipelines(x => _36.Next(x).Bind(fn)) :
            op is InfusioOp<A>.ListOrders _37 ? new InfusioOp<B>.ListOrders(x => _37.Next(x).Bind(fn), _37.ProductId, _37.ContactId, _37.Order, _37.Paid, _37.Offset, _37.Limit, _37.Until, _37.Since) :
            op is InfusioOp<A>.RetrieveOrderModel _38 ? new InfusioOp<B>.RetrieveOrderModel(x => _38.Next(x).Bind(fn)) :
            op is InfusioOp<A>.GetOrder _39 ? new InfusioOp<B>.GetOrder(x => _39.Next(x).Bind(fn), _39.OrderId) :
            op is InfusioOp<A>.ListTransactionsForOrder _40 ? new InfusioOp<B>.ListTransactionsForOrder(x => _40.Next(x).Bind(fn), _40.OrderId, _40.ContactId, _40.Offset, _40.Limit, _40.Until, _40.Since) :
            op is InfusioOp<A>.ListProducts _41 ? new InfusioOp<B>.ListProducts(x => _41.Next(x).Bind(fn), _41.Active, _41.Offset, _41.Limit) :
            op is InfusioOp<A>.ListProductsFromSyncToken _42 ? new InfusioOp<B>.ListProductsFromSyncToken(x => _42.Next(x).Bind(fn), _42.Offset, _42.Limit, _42.SyncToken) :
            op is InfusioOp<A>.GetProduct _43 ? new InfusioOp<B>.GetProduct(x => _43.Next(x).Bind(fn), _43.ProductId) :
            op is InfusioOp<A>.GetApplicationEnabled _44 ? new InfusioOp<B>.GetApplicationEnabled(x => _44.Next(x).Bind(fn)) :
            op is InfusioOp<A>.GetContactOptionTypes _45 ? new InfusioOp<B>.GetContactOptionTypes(x => _45.Next(x).Bind(fn)) :
            op is InfusioOp<A>.RetrieveSubscriptionModel _46 ? new InfusioOp<B>.RetrieveSubscriptionModel(x => _46.Next(x).Bind(fn)) :
            op is InfusioOp<A>.ListTags _47 ? new InfusioOp<B>.ListTags(x => _47.Next(x).Bind(fn), _47.Category, _47.Offset, _47.Limit) :
            op is InfusioOp<A>.CreateTagCategory _48 ? new InfusioOp<B>.CreateTagCategory(x => _48.Next(x).Bind(fn), _48.TagCategory) :
            op is InfusioOp<A>.GetTag _49 ? new InfusioOp<B>.GetTag(x => _49.Next(x).Bind(fn), _49.Id) :
            op is InfusioOp<A>.ListContactsForTagId _50 ? new InfusioOp<B>.ListContactsForTagId(x => _50.Next(x).Bind(fn), _50.TagId, _50.Offset, _50.Limit) :
            op is InfusioOp<A>.RemoveTagFromContactId _51 ? new InfusioOp<B>.RemoveTagFromContactId(x => _51.Next(x).Bind(fn), _51.ContactId, _51.TagId) :
            op is InfusioOp<A>.ListTasks _52 ? new InfusioOp<B>.ListTasks(x => _52.Next(x).Bind(fn), _52.Order, _52.Offset, _52.Limit, _52.Completed, _52.Until, _52.Since, _52.UserId, _52.HasDueDate, _52.ContactId) :
            op is InfusioOp<A>.RetrieveTaskModel _53 ? new InfusioOp<B>.RetrieveTaskModel(x => _53.Next(x).Bind(fn)) :
            op is InfusioOp<A>.ListTasksForCurrentUser _54 ? new InfusioOp<B>.ListTasksForCurrentUser(x => _54.Next(x).Bind(fn), _54.Order, _54.Offset, _54.Limit, _54.Completed, _54.Until, _54.Since, _54.UserId, _54.HasDueDate, _54.ContactId) :
            op is InfusioOp<A>.GetTask _55 ? new InfusioOp<B>.GetTask(x => _55.Next(x).Bind(fn), _55.TaskId) :
            op is InfusioOp<A>.ListTransactions _56 ? new InfusioOp<B>.ListTransactions(x => _56.Next(x).Bind(fn), _56.ContactId, _56.Offset, _56.Limit, _56.Until, _56.Since) :
            op is InfusioOp<A>.GetTransaction _57 ? new InfusioOp<B>.GetTransaction(x => _57.Next(x).Bind(fn), _57.TransactionId) as InfusioOp<B> :
            throw new NotSupportedException();
    }
}