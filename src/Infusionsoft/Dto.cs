//----------------------
// <auto-generated>
// </auto-generated>
//----------------------
using System.Runtime.Serialization;
using LanguageExt;
using Newtonsoft.Json;

namespace Infusion.Model
{
    public enum DuplicateOption
    {
        [EnumMember(Value = "Email")]
        Email,
        [EnumMember(Value = "EmailAndName")]
        Emailandname
    }

    public enum Status
    {
        [EnumMember(Value = "Unverified")]
        Unverified,
        [EnumMember(Value = "Verified")]
        Verified,
        [EnumMember(Value = "Inactive")]
        Inactive
    }

    public enum Field
    {
        [EnumMember(Value = "BILLING")]
        Billing,
        [EnumMember(Value = "SHIPPING")]
        Shipping,
        [EnumMember(Value = "OTHER")]
        Other
    }

    public enum SourceType
    {
        [EnumMember(Value = "WEBFORM")]
        Webform,
        [EnumMember(Value = "LANDINGPAGE")]
        Landingpage,
        [EnumMember(Value = "IMPORT")]
        Import,
        [EnumMember(Value = "MANUAL")]
        Manual,
        [EnumMember(Value = "API")]
        Api,
        [EnumMember(Value = "OTHER")]
        Other,
        [EnumMember(Value = "UNKNOWN")]
        Unknown
    }

    public enum Category
    {
        [EnumMember(Value = "Attachments")]
        Attachments,
        [EnumMember(Value = "Cart")]
        Cart,
        [EnumMember(Value = "Documents")]
        Documents,
        [EnumMember(Value = "Hidden")]
        Hidden,
        [EnumMember(Value = "Invoice")]
        Invoice,
        [EnumMember(Value = "Logo")]
        Logo,
        [EnumMember(Value = "Tickets")]
        Tickets,
        [EnumMember(Value = "WebForm")]
        Webform,
        [EnumMember(Value = "Funnel")]
        Funnel
    }

    public enum FieldType
    {
        [EnumMember(Value = "Currency")]
        Currency,
        [EnumMember(Value = "Date")]
        Date,
        [EnumMember(Value = "DateTime")]
        Datetime,
        [EnumMember(Value = "DayOfWeek")]
        Dayofweek,
        [EnumMember(Value = "Drilldown")]
        Drilldown,
        [EnumMember(Value = "Email")]
        Email,
        [EnumMember(Value = "Month")]
        Month,
        [EnumMember(Value = "ListBox")]
        Listbox,
        [EnumMember(Value = "Name")]
        Name,
        [EnumMember(Value = "WholeNumber")]
        Wholenumber,
        [EnumMember(Value = "DecimalNumber")]
        Decimalnumber,
        [EnumMember(Value = "Percent")]
        Percent,
        [EnumMember(Value = "PhoneNumber")]
        Phonenumber,
        [EnumMember(Value = "Radio")]
        Radio,
        [EnumMember(Value = "Dropdown")]
        Dropdown,
        [EnumMember(Value = "SocialSecurityNumber")]
        Socialsecuritynumber,
        [EnumMember(Value = "State")]
        State,
        [EnumMember(Value = "Text")]
        Text,
        [EnumMember(Value = "TextArea")]
        Textarea,
        [EnumMember(Value = "User")]
        User,
        [EnumMember(Value = "UserListBox")]
        Userlistbox,
        [EnumMember(Value = "Website")]
        Website,
        [EnumMember(Value = "Year")]
        Year,
        [EnumMember(Value = "YesNo")]
        Yesno
    }

    public enum FileBoxType
    {
        [EnumMember(Value = "Application")]
        Application,
        [EnumMember(Value = "Image")]
        Image,
        [EnumMember(Value = "Fax")]
        Fax,
        [EnumMember(Value = "Attachment")]
        Attachment,
        [EnumMember(Value = "Ticket")]
        Ticket,
        [EnumMember(Value = "Contact")]
        Contact,
        [EnumMember(Value = "DigitalProduct")]
        Digitalproduct,
        [EnumMember(Value = "Import")]
        Import,
        [EnumMember(Value = "Hidden")]
        Hidden,
        [EnumMember(Value = "WebForm")]
        Webform,
        [EnumMember(Value = "StyledCart")]
        Styledcart,
        [EnumMember(Value = "ReSampledImage")]
        Resampledimage,
        [EnumMember(Value = "TemplateThumbnail")]
        Templatethumbnail,
        [EnumMember(Value = "Funnel")]
        Funnel,
        [EnumMember(Value = "LogoThumbnail")]
        Logothumbnail
    }

    public enum Type
    {
        [EnumMember(Value = "NULL")]
        Null,
        [EnumMember(Value = "Start")]
        Start,
        [EnumMember(Value = "Wait")]
        Wait,
        [EnumMember(Value = "DelayTimer")]
        Delaytimer,
        [EnumMember(Value = "ContactTimer")]
        Contacttimer,
        [EnumMember(Value = "DateTimer")]
        Datetimer,
        [EnumMember(Value = "Email")]
        Email,
        [EnumMember(Value = "BardEmail")]
        Bardemail,
        [EnumMember(Value = "EmailConfirm")]
        Emailconfirm,
        [EnumMember(Value = "Voice")]
        Voice,
        [EnumMember(Value = "Fax")]
        Fax,
        [EnumMember(Value = "Letter")]
        Letter,
        [EnumMember(Value = "Tag")]
        Tag,
        [EnumMember(Value = "Opportunity")]
        Opportunity,
        [EnumMember(Value = "Note")]
        Note,
        [EnumMember(Value = "Task")]
        Task,
        [EnumMember(Value = "CompleteTasks")]
        Completetasks,
        [EnumMember(Value = "Appointment")]
        Appointment,
        [EnumMember(Value = "AssignOwner")]
        Assignowner,
        [EnumMember(Value = "FieldValue")]
        Fieldvalue,
        [EnumMember(Value = "Fulfillment")]
        Fulfillment,
        [EnumMember(Value = "CreateOrder")]
        Createorder,
        [EnumMember(Value = "Http")]
        Http,
        [EnumMember(Value = "CustomerHub")]
        Customerhub,
        [EnumMember(Value = "ActionSet")]
        Actionset
    }

    public enum Key
    {
        [EnumMember(Value = "SUCCESS")]
        Success,
        [EnumMember(Value = "DUPLICATE")]
        Duplicate,
        [EnumMember(Value = "CONTACT_NOT_FOUND")]
        Contactnotfound,
        [EnumMember(Value = "TAG_ID_NOT_FOUND")]
        Tagidnotfound,
        [EnumMember(Value = "FAILURE")]
        Failure,
        [EnumMember(Value = "NO_PERMISSION")]
        Nopermission
    }

    public enum RecordType
    {
        [EnumMember(Value = "CONTACT")]
        Contact,
        [EnumMember(Value = "REFERRAL_PARTNER")]
        Referralpartner,
        [EnumMember(Value = "OPPORTUNITY")]
        Opportunity,
        [EnumMember(Value = "TASK_APPOINTMENT")]
        Taskappointment,
        [EnumMember(Value = "COMPANY")]
        Company,
        [EnumMember(Value = "ORDER")]
        Order,
        [EnumMember(Value = "SUBSCRIPTION")]
        Subscription
    }

    public enum EmailStatus
    {
        [EnumMember(Value = "Unengaged Marketable")]
        Unengagedmarketable,
        [EnumMember(Value = "Unconfirmed")]
        Unconfirmed,
        [EnumMember(Value = "Confirmed (Legacy)")]
        Confirmedlegacy,
        [EnumMember(Value = "Confirmed")]
        Confirmed,
        [EnumMember(Value = "Unengaged NonMarketable")]
        Unengagednonmarketable,
        [EnumMember(Value = "Non-marketable")]
        Nonmarketable,
        [EnumMember(Value = "Lockdown")]
        Lockdown,
        [EnumMember(Value = "Soft Bounce")]
        Softbounce,
        [EnumMember(Value = "Hard Bounce")]
        Hardbounce,
        [EnumMember(Value = "Opt-Out")]
        Optout,
        [EnumMember(Value = "Opt-Out: Admin")]
        Optoutadmin,
        [EnumMember(Value = "Opt-Out: System")]
        Optoutsystem,
        [EnumMember(Value = "List Unsubscribe")]
        Listunsubscribe,
        [EnumMember(Value = "Provided Feedback")]
        Providedfeedback,
        [EnumMember(Value = "Reported Spam")]
        Reportedspam,
        [EnumMember(Value = "Invalid Email")]
        Invalidemail
    }

    public enum FileAssociation
    {
        [EnumMember(Value = "CONTACT")]
        Contact,
        [EnumMember(Value = "USER")]
        User,
        [EnumMember(Value = "COMPANY")]
        Company
    }

    public class CustomFieldMetaData : Record<CustomFieldMetaData>
    {
        [JsonProperty("field_type")]
        public readonly FieldType FieldType;
        [JsonProperty("id")]
        public readonly long Id;
        [JsonProperty("label")]
        public readonly string Label;
        [JsonProperty("options")]
        public readonly Lst<CustomFieldOption> Options;
        [JsonProperty("record_type")]
        public readonly RecordType RecordType;
        public CustomFieldMetaData(FieldType fieldType = default, long id = default, string label = default, Lst<CustomFieldOption> options = default, RecordType recordType = default)
        {
            FieldType = fieldType;
            Id = id;
            Label = label;
            Options = options;
            RecordType = recordType;
        }

        public CustomFieldMetaData Copy(FieldType fieldType = default, long? id = default, string label = default, Lst<CustomFieldOption> options = default, RecordType recordType = default) => new CustomFieldMetaData(fieldType: fieldType == default ? FieldType : fieldType, id: id ?? Id, label: label ?? Label, options: options == default ? Options : options, recordType: recordType == default ? RecordType : recordType);
    }

    public class Appointment : Record<Appointment>
    {
        [JsonProperty("contact_id")]
        public readonly long ContactId;
        [JsonProperty("description")]
        public readonly string Description;
        [JsonProperty("end_date")]
        public readonly string EndDate;
        [JsonProperty("location")]
        public readonly string Location;
        [JsonProperty("remind_time")]
        public readonly int RemindTime;
        [JsonProperty("start_date")]
        public readonly string StartDate;
        [JsonProperty("title")]
        public readonly string Title;
        [JsonProperty("user")]
        public readonly long User;
        public Appointment(long contactId = default, string description = default, string endDate = default, string location = default, int remindTime = default, string startDate = default, string title = default, long user = default)
        {
            ContactId = contactId;
            Description = description;
            EndDate = endDate;
            Location = location;
            RemindTime = remindTime;
            StartDate = startDate;
            Title = title;
            User = user;
        }

        public Appointment Copy(long? contactId = default, string description = default, string endDate = default, string location = default, int? remindTime = default, string startDate = default, string title = default, long? user = default) => new Appointment(contactId: contactId ?? ContactId, description: description ?? Description, endDate: endDate ?? EndDate, location: location ?? Location, remindTime: remindTime ?? RemindTime, startDate: startDate ?? StartDate, title: title ?? Title, user: user ?? User);
    }

    public class CustomFieldValue : Record<CustomFieldValue>
    {
        [JsonProperty("content")]
        public readonly object Content;
        [JsonProperty("id")]
        public readonly long Id;
        public CustomFieldValue(object content = default, long id = default)
        {
            Content = content;
            Id = id;
        }

        public CustomFieldValue Copy(object content = default, long? id = default) => new CustomFieldValue(content: content ?? Content, id: id ?? Id);
    }

    public class EntryLongString : Record<EntryLongString>
    {
        [JsonProperty("key")]
        public readonly Key Key;
        public EntryLongString(Key key = default)
        {
            Key = key;
        }

        public EntryLongString Copy(Key key = default) => new EntryLongString(key: key == default ? Key : key);
    }

    public class SubscriptionPlan : Record<SubscriptionPlan>
    {
        [JsonProperty("active")]
        public readonly bool Active;
        [JsonProperty("cycle")]
        public readonly int Cycle;
        [JsonProperty("frequency")]
        public readonly int Frequency;
        [JsonProperty("id")]
        public readonly long Id;
        [JsonProperty("number_of_cycles")]
        public readonly int NumberOfCycles;
        [JsonProperty("plan_price")]
        public readonly int PlanPrice;
        [JsonProperty("subscription_plan_index")]
        public readonly int SubscriptionPlanIndex;
        [JsonProperty("subscription_plan_name")]
        public readonly string SubscriptionPlanName;
        [JsonProperty("url")]
        public readonly string Url;
        public SubscriptionPlan(bool active = default, int cycle = default, int frequency = default, long id = default, int numberOfCycles = default, int planPrice = default, int subscriptionPlanIndex = default, string subscriptionPlanName = default, string url = default)
        {
            Active = active;
            Cycle = cycle;
            Frequency = frequency;
            Id = id;
            NumberOfCycles = numberOfCycles;
            PlanPrice = planPrice;
            SubscriptionPlanIndex = subscriptionPlanIndex;
            SubscriptionPlanName = subscriptionPlanName;
            Url = url;
        }

        public SubscriptionPlan Copy(bool active = default, int? cycle = default, int? frequency = default, long? id = default, int? numberOfCycles = default, int? planPrice = default, int? subscriptionPlanIndex = default, string subscriptionPlanName = default, string url = default) => new SubscriptionPlan(active: active == default ? Active : active, cycle: cycle ?? Cycle, frequency: frequency ?? Frequency, id: id ?? Id, numberOfCycles: numberOfCycles ?? NumberOfCycles, planPrice: planPrice ?? PlanPrice, subscriptionPlanIndex: subscriptionPlanIndex ?? SubscriptionPlanIndex, subscriptionPlanName: subscriptionPlanName ?? SubscriptionPlanName, url: url ?? Url);
    }

    public class Company : Record<Company>
    {
        [JsonProperty("address")]
        public readonly CompanyAddress Address;
        [JsonProperty("company_name")]
        public readonly string CompanyName;
        [JsonProperty("custom_fields")]
        public readonly Lst<CustomFieldValue> CustomFields;
        [JsonProperty("email_address")]
        public readonly string EmailAddress;
        [JsonProperty("email_opted_in")]
        public readonly bool EmailOptedIn;
        [JsonProperty("email_status")]
        public readonly EmailStatus EmailStatus;
        [JsonProperty("fax_number")]
        public readonly CompanyFaxNumber FaxNumber;
        [JsonProperty("id")]
        public readonly long Id;
        [JsonProperty("notes")]
        public readonly string Notes;
        [JsonProperty("phone_number")]
        public readonly CompanyPhoneNumber PhoneNumber;
        [JsonProperty("website")]
        public readonly string Website;
        public Company(CompanyAddress address = default, string companyName = default, Lst<CustomFieldValue> customFields = default, string emailAddress = default, bool emailOptedIn = default, EmailStatus emailStatus = default, CompanyFaxNumber faxNumber = default, long id = default, string notes = default, CompanyPhoneNumber phoneNumber = default, string website = default)
        {
            Address = address;
            CompanyName = companyName;
            CustomFields = customFields;
            EmailAddress = emailAddress;
            EmailOptedIn = emailOptedIn;
            EmailStatus = emailStatus;
            FaxNumber = faxNumber;
            Id = id;
            Notes = notes;
            PhoneNumber = phoneNumber;
            Website = website;
        }

        public Company Copy(CompanyAddress address = default, string companyName = default, Lst<CustomFieldValue> customFields = default, string emailAddress = default, bool emailOptedIn = default, EmailStatus emailStatus = default, CompanyFaxNumber faxNumber = default, long? id = default, string notes = default, CompanyPhoneNumber phoneNumber = default, string website = default) => new Company(address: address == default ? Address : address, companyName: companyName ?? CompanyName, customFields: customFields == default ? CustomFields : customFields, emailAddress: emailAddress ?? EmailAddress, emailOptedIn: emailOptedIn == default ? EmailOptedIn : emailOptedIn, emailStatus: emailStatus == default ? EmailStatus : emailStatus, faxNumber: faxNumber == default ? FaxNumber : faxNumber, id: id ?? Id, notes: notes ?? Notes, phoneNumber: phoneNumber == default ? PhoneNumber : phoneNumber, website: website ?? Website);
    }

    public class InfusionTask : Record<InfusionTask>
    {
        [JsonProperty("completed")]
        public readonly bool Completed;
        [JsonProperty("completion_date")]
        public readonly string CompletionDate;
        [JsonProperty("contact")]
        public readonly BasicContact Contact;
        [JsonProperty("creation_date")]
        public readonly string CreationDate;
        [JsonProperty("description")]
        public readonly string Description;
        [JsonProperty("due_date")]
        public readonly string DueDate;
        [JsonProperty("modification_date")]
        public readonly string ModificationDate;
        [JsonProperty("priority")]
        public readonly int Priority;
        [JsonProperty("title")]
        public readonly string Title;
        [JsonProperty("type")]
        public readonly string Type;
        [JsonProperty("url")]
        public readonly string Url;
        [JsonProperty("user_id")]
        public readonly long UserId;
        public InfusionTask(bool completed = default, string completionDate = default, BasicContact contact = default, string creationDate = default, string description = default, string dueDate = default, string modificationDate = default, int priority = default, string title = default, string type = default, string url = default, long userId = default)
        {
            Completed = completed;
            CompletionDate = completionDate;
            Contact = contact;
            CreationDate = creationDate;
            Description = description;
            DueDate = dueDate;
            ModificationDate = modificationDate;
            Priority = priority;
            Title = title;
            Type = type;
            Url = url;
            UserId = userId;
        }

        public InfusionTask Copy(bool completed = default, string completionDate = default, BasicContact contact = default, string creationDate = default, string description = default, string dueDate = default, string modificationDate = default, int? priority = default, string title = default, string type = default, string url = default, long? userId = default) => new InfusionTask(completed: completed == default ? Completed : completed, completionDate: completionDate ?? CompletionDate, contact: contact == default ? Contact : contact, creationDate: creationDate ?? CreationDate, description: description ?? Description, dueDate: dueDate ?? DueDate, modificationDate: modificationDate ?? ModificationDate, priority: priority ?? Priority, title: title ?? Title, type: type ?? Type, url: url ?? Url, userId: userId ?? UserId);
    }

    public class CompanyList : Record<CompanyList>
    {
        [JsonProperty("companies")]
        public readonly Lst<Company> Companies;
        [JsonProperty("count")]
        public readonly int Count;
        [JsonProperty("next")]
        public readonly string Next;
        [JsonProperty("previous")]
        public readonly string Previous;
        public CompanyList(Lst<Company> companies = default, int count = default, string next = default, string previous = default)
        {
            Companies = companies;
            Count = count;
            Next = next;
            Previous = previous;
        }

        public CompanyList Copy(Lst<Company> companies = default, int? count = default, string next = default, string previous = default) => new CompanyList(companies: companies == default ? Companies : companies, count: count ?? Count, next: next ?? Next, previous: previous ?? Previous);
    }

    public class Address : Record<Address>
    {
        [JsonProperty("country_code")]
        public readonly string CountryCode;
        [JsonProperty("field")]
        public readonly Field Field;
        [JsonProperty("line1")]
        public readonly string Line1;
        [JsonProperty("line2")]
        public readonly string Line2;
        [JsonProperty("locality")]
        public readonly string Locality;
        [JsonProperty("postal_code")]
        public readonly string PostalCode;
        [JsonProperty("region")]
        public readonly string Region;
        [JsonProperty("zip_code")]
        public readonly string ZipCode;
        [JsonProperty("zip_four")]
        public readonly string ZipFour;
        public Address(string countryCode = default, Field field = default, string line1 = default, string line2 = default, string locality = default, string postalCode = default, string region = default, string zipCode = default, string zipFour = default)
        {
            CountryCode = countryCode;
            Field = field;
            Line1 = line1;
            Line2 = line2;
            Locality = locality;
            PostalCode = postalCode;
            Region = region;
            ZipCode = zipCode;
            ZipFour = zipFour;
        }

        public Address Copy(string countryCode = default, Field field = default, string line1 = default, string line2 = default, string locality = default, string postalCode = default, string region = default, string zipCode = default, string zipFour = default) => new Address(countryCode: countryCode ?? CountryCode, field: field == default ? Field : field, line1: line1 ?? Line1, line2: line2 ?? Line2, locality: locality ?? Locality, postalCode: postalCode ?? PostalCode, region: region ?? Region, zipCode: zipCode ?? ZipCode, zipFour: zipFour ?? ZipFour);
    }

    public class SalesPipeline : Record<SalesPipeline>
    {
        [JsonProperty("end_stage")]
        public readonly bool EndStage;
        [JsonProperty("is_default")]
        public readonly bool IsDefault;
        [JsonProperty("stage_count")]
        public readonly int StageCount;
        [JsonProperty("stage_id")]
        public readonly long StageId;
        [JsonProperty("stage_name")]
        public readonly string StageName;
        [JsonProperty("stage_order")]
        public readonly int StageOrder;
        public SalesPipeline(bool endStage = default, bool isDefault = default, int stageCount = default, long stageId = default, string stageName = default, int stageOrder = default)
        {
            EndStage = endStage;
            IsDefault = isDefault;
            StageCount = stageCount;
            StageId = stageId;
            StageName = stageName;
            StageOrder = stageOrder;
        }

        public SalesPipeline Copy(bool endStage = default, bool isDefault = default, int? stageCount = default, long? stageId = default, string stageName = default, int? stageOrder = default) => new SalesPipeline(endStage: endStage == default ? EndStage : endStage, isDefault: isDefault == default ? IsDefault : isDefault, stageCount: stageCount ?? StageCount, stageId: stageId ?? StageId, stageName: stageName ?? StageName, stageOrder: stageOrder ?? StageOrder);
    }

    public class ShippingInformation : Record<ShippingInformation>
    {
        [JsonProperty("city")]
        public readonly string City;
        [JsonProperty("company")]
        public readonly string Company;
        [JsonProperty("country")]
        public readonly string Country;
        [JsonProperty("first_name")]
        public readonly string FirstName;
        [JsonProperty("id")]
        public readonly long Id;
        [JsonProperty("last_name")]
        public readonly string LastName;
        [JsonProperty("middle_name")]
        public readonly string MiddleName;
        [JsonProperty("phone")]
        public readonly string Phone;
        [JsonProperty("state")]
        public readonly string State;
        [JsonProperty("street1")]
        public readonly string Street1;
        [JsonProperty("street2")]
        public readonly string Street2;
        [JsonProperty("zip")]
        public readonly string Zip;
        public ShippingInformation(string city = default, string company = default, string country = default, string firstName = default, long id = default, string lastName = default, string middleName = default, string phone = default, string state = default, string street1 = default, string street2 = default, string zip = default)
        {
            City = city;
            Company = company;
            Country = country;
            FirstName = firstName;
            Id = id;
            LastName = lastName;
            MiddleName = middleName;
            Phone = phone;
            State = state;
            Street1 = street1;
            Street2 = street2;
            Zip = zip;
        }

        public ShippingInformation Copy(string city = default, string company = default, string country = default, string firstName = default, long? id = default, string lastName = default, string middleName = default, string phone = default, string state = default, string street1 = default, string street2 = default, string zip = default) => new ShippingInformation(city: city ?? City, company: company ?? Company, country: country ?? Country, firstName: firstName ?? FirstName, id: id ?? Id, lastName: lastName ?? LastName, middleName: middleName ?? MiddleName, phone: phone ?? Phone, state: state ?? State, street1: street1 ?? Street1, street2: street2 ?? Street2, zip: zip ?? Zip);
    }

    public class CheckListItemDetails : Record<CheckListItemDetails>
    {
        [JsonProperty("description")]
        public readonly string Description;
        [JsonProperty("done_date")]
        public readonly string DoneDate;
        [JsonProperty("id")]
        public readonly long Id;
        [JsonProperty("instance_id")]
        public readonly long InstanceId;
        [JsonProperty("item_order")]
        public readonly int ItemOrder;
        [JsonProperty("required")]
        public readonly bool Required;
        public CheckListItemDetails(string description = default, string doneDate = default, long id = default, long instanceId = default, int itemOrder = default, bool required = default)
        {
            Description = description;
            DoneDate = doneDate;
            Id = id;
            InstanceId = instanceId;
            ItemOrder = itemOrder;
            Required = required;
        }

        public CheckListItemDetails Copy(string description = default, string doneDate = default, long? id = default, long? instanceId = default, int? itemOrder = default, bool required = default) => new CheckListItemDetails(description: description ?? Description, doneDate: doneDate ?? DoneDate, id: id ?? Id, instanceId: instanceId ?? InstanceId, itemOrder: itemOrder ?? ItemOrder, required: required == default ? Required : required);
    }

    public class TaskList : Record<TaskList>
    {
        [JsonProperty("count")]
        public readonly int Count;
        [JsonProperty("next")]
        public readonly string Next;
        [JsonProperty("previous")]
        public readonly string Previous;
        [JsonProperty("sync_token")]
        public readonly string SyncToken;
        [JsonProperty("tasks")]
        public readonly Lst<InfusionTask> Tasks;
        public TaskList(int count = default, string next = default, string previous = default, string syncToken = default, Lst<InfusionTask> tasks = default)
        {
            Count = count;
            Next = next;
            Previous = previous;
            SyncToken = syncToken;
            Tasks = tasks;
        }

        public TaskList Copy(int? count = default, string next = default, string previous = default, string syncToken = default, Lst<InfusionTask> tasks = default) => new TaskList(count: count ?? Count, next: next ?? Next, previous: previous ?? Previous, syncToken: syncToken ?? SyncToken, tasks: tasks == default ? Tasks : tasks);
    }

    public class Product : Record<Product>
    {
        [JsonProperty("id")]
        public readonly long Id;
        [JsonProperty("product_desc")]
        public readonly string ProductDesc;
        [JsonProperty("product_name")]
        public readonly string ProductName;
        [JsonProperty("product_options")]
        public readonly Lst<ProductOption> ProductOptions;
        [JsonProperty("product_price")]
        public readonly int ProductPrice;
        [JsonProperty("product_short_desc")]
        public readonly string ProductShortDesc;
        [JsonProperty("sku")]
        public readonly string Sku;
        [JsonProperty("status")]
        public readonly int Status;
        [JsonProperty("sub_category_id")]
        public readonly long SubCategoryId;
        [JsonProperty("subscription_only")]
        public readonly bool SubscriptionOnly;
        [JsonProperty("subscription_plans")]
        public readonly Lst<SubscriptionPlan> SubscriptionPlans;
        [JsonProperty("url")]
        public readonly string Url;
        public Product(long id = default, string productDesc = default, string productName = default, Lst<ProductOption> productOptions = default, int productPrice = default, string productShortDesc = default, string sku = default, int status = default, long subCategoryId = default, bool subscriptionOnly = default, Lst<SubscriptionPlan> subscriptionPlans = default, string url = default)
        {
            Id = id;
            ProductDesc = productDesc;
            ProductName = productName;
            ProductOptions = productOptions;
            ProductPrice = productPrice;
            ProductShortDesc = productShortDesc;
            Sku = sku;
            Status = status;
            SubCategoryId = subCategoryId;
            SubscriptionOnly = subscriptionOnly;
            SubscriptionPlans = subscriptionPlans;
            Url = url;
        }

        public Product Copy(long? id = default, string productDesc = default, string productName = default, Lst<ProductOption> productOptions = default, int? productPrice = default, string productShortDesc = default, string sku = default, int? status = default, long? subCategoryId = default, bool subscriptionOnly = default, Lst<SubscriptionPlan> subscriptionPlans = default, string url = default) => new Product(id: id ?? Id, productDesc: productDesc ?? ProductDesc, productName: productName ?? ProductName, productOptions: productOptions == default ? ProductOptions : productOptions, productPrice: productPrice ?? ProductPrice, productShortDesc: productShortDesc ?? ProductShortDesc, sku: sku ?? Sku, status: status ?? Status, subCategoryId: subCategoryId ?? SubCategoryId, subscriptionOnly: subscriptionOnly == default ? SubscriptionOnly : subscriptionOnly, subscriptionPlans: subscriptionPlans == default ? SubscriptionPlans : subscriptionPlans, url: url ?? Url);
    }

    public class OpportunityContact : Record<OpportunityContact>
    {
        [JsonProperty("company_name")]
        public readonly string CompanyName;
        [JsonProperty("email")]
        public readonly string Email;
        [JsonProperty("first_name")]
        public readonly string FirstName;
        [JsonProperty("id")]
        public readonly long Id;
        [JsonProperty("job_title")]
        public readonly string JobTitle;
        [JsonProperty("last_name")]
        public readonly string LastName;
        [JsonProperty("phone_number")]
        public readonly string PhoneNumber;
        public OpportunityContact(string companyName = default, string email = default, string firstName = default, long id = default, string jobTitle = default, string lastName = default, string phoneNumber = default)
        {
            CompanyName = companyName;
            Email = email;
            FirstName = firstName;
            Id = id;
            JobTitle = jobTitle;
            LastName = lastName;
            PhoneNumber = phoneNumber;
        }

        public OpportunityContact Copy(string companyName = default, string email = default, string firstName = default, long? id = default, string jobTitle = default, string lastName = default, string phoneNumber = default) => new OpportunityContact(companyName: companyName ?? CompanyName, email: email ?? Email, firstName: firstName ?? FirstName, id: id ?? Id, jobTitle: jobTitle ?? JobTitle, lastName: lastName ?? LastName, phoneNumber: phoneNumber ?? PhoneNumber);
    }

    public class OrderContactDetails : Record<OrderContactDetails>
    {
        [JsonProperty("company_name")]
        public readonly string CompanyName;
        [JsonProperty("email")]
        public readonly string Email;
        [JsonProperty("first_name")]
        public readonly string FirstName;
        [JsonProperty("id")]
        public readonly long Id;
        [JsonProperty("job_title")]
        public readonly string JobTitle;
        [JsonProperty("last_name")]
        public readonly string LastName;
        public OrderContactDetails(string companyName = default, string email = default, string firstName = default, long id = default, string jobTitle = default, string lastName = default)
        {
            CompanyName = companyName;
            Email = email;
            FirstName = firstName;
            Id = id;
            JobTitle = jobTitle;
            LastName = lastName;
        }

        public OrderContactDetails Copy(string companyName = default, string email = default, string firstName = default, long? id = default, string jobTitle = default, string lastName = default) => new OrderContactDetails(companyName: companyName ?? CompanyName, email: email ?? Email, firstName: firstName ?? FirstName, id: id ?? Id, jobTitle: jobTitle ?? JobTitle, lastName: lastName ?? LastName);
    }

    public class CategoryReference : Record<CategoryReference>
    {
        [JsonProperty("id")]
        public readonly long Id;
        public CategoryReference(long id = default)
        {
            Id = id;
        }

        public CategoryReference Copy(long? id = default) => new CategoryReference(id: id ?? Id);
    }

    public class RestHook : Record<RestHook>
    {
        [JsonProperty("eventKey")]
        public readonly string EventKey;
        [JsonProperty("hookUrl")]
        public readonly string HookUrl;
        [JsonProperty("key")]
        public readonly string Key;
        [JsonProperty("status")]
        public readonly Status Status;
        public RestHook(string eventKey = default, string hookUrl = default, string key = default, Status status = default)
        {
            EventKey = eventKey;
            HookUrl = hookUrl;
            Key = key;
            Status = status;
        }

        public RestHook Copy(string eventKey = default, string hookUrl = default, string key = default, Status status = default) => new RestHook(eventKey: eventKey ?? EventKey, hookUrl: hookUrl ?? HookUrl, key: key ?? Key, status: status == default ? Status : status);
    }

    public class ProductOptionValue : Record<ProductOptionValue>
    {
        [JsonProperty("id")]
        public readonly long Id;
        [JsonProperty("index")]
        public readonly long Index;
        [JsonProperty("is_default")]
        public readonly bool IsDefault;
        [JsonProperty("label")]
        public readonly string Label;
        [JsonProperty("price_adjustment")]
        public readonly int PriceAdjustment;
        [JsonProperty("sku")]
        public readonly string Sku;
        public ProductOptionValue(long id = default, long index = default, bool isDefault = default, string label = default, int priceAdjustment = default, string sku = default)
        {
            Id = id;
            Index = index;
            IsDefault = isDefault;
            Label = label;
            PriceAdjustment = priceAdjustment;
            Sku = sku;
        }

        public ProductOptionValue Copy(long? id = default, long? index = default, bool isDefault = default, string label = default, int? priceAdjustment = default, string sku = default) => new ProductOptionValue(id: id ?? Id, index: index ?? Index, isDefault: isDefault == default ? IsDefault : isDefault, label: label ?? Label, priceAdjustment: priceAdjustment ?? PriceAdjustment, sku: sku ?? Sku);
    }

    public class Item : Record<Item>
    {
        [JsonProperty("id")]
        public readonly long Id;
        [JsonProperty("name")]
        public readonly string Name;
        [JsonProperty("next_item_id")]
        public readonly long NextItemId;
        [JsonProperty("previous_item_id")]
        public readonly long PreviousItemId;
        [JsonProperty("type")]
        public readonly Type Type;
        public Item(long id = default, string name = default, long nextItemId = default, long previousItemId = default, Type type = default)
        {
            Id = id;
            Name = name;
            NextItemId = nextItemId;
            PreviousItemId = previousItemId;
            Type = type;
        }

        public Item Copy(long? id = default, string name = default, long? nextItemId = default, long? previousItemId = default, Type type = default) => new Item(id: id ?? Id, name: name ?? Name, nextItemId: nextItemId ?? NextItemId, previousItemId: previousItemId ?? PreviousItemId, type: type == default ? Type : type);
    }

    public class EmailSentQueryResultWithContent : Record<EmailSentQueryResultWithContent>
    {
        [JsonProperty("contact_id")]
        public readonly long ContactId;
        [JsonProperty("headers")]
        public readonly string Headers;
        [JsonProperty("html_content")]
        public readonly string HtmlContent;
        [JsonProperty("id")]
        public readonly long Id;
        [JsonProperty("opened_date")]
        public readonly string OpenedDate;
        [JsonProperty("plain_content")]
        public readonly string PlainContent;
        [JsonProperty("received_date")]
        public readonly string ReceivedDate;
        [JsonProperty("sent_date")]
        public readonly string SentDate;
        [JsonProperty("sent_from_address")]
        public readonly string SentFromAddress;
        [JsonProperty("sent_from_reply_address")]
        public readonly string SentFromReplyAddress;
        [JsonProperty("sent_to_address")]
        public readonly string SentToAddress;
        [JsonProperty("sent_to_bcc_addresses")]
        public readonly string SentToBccAddresses;
        [JsonProperty("sent_to_cc_addresses")]
        public readonly string SentToCcAddresses;
        [JsonProperty("subject")]
        public readonly string Subject;
        public EmailSentQueryResultWithContent(long contactId = default, string headers = default, string htmlContent = default, long id = default, string openedDate = default, string plainContent = default, string receivedDate = default, string sentDate = default, string sentFromAddress = default, string sentFromReplyAddress = default, string sentToAddress = default, string sentToBccAddresses = default, string sentToCcAddresses = default, string subject = default)
        {
            ContactId = contactId;
            Headers = headers;
            HtmlContent = htmlContent;
            Id = id;
            OpenedDate = openedDate;
            PlainContent = plainContent;
            ReceivedDate = receivedDate;
            SentDate = sentDate;
            SentFromAddress = sentFromAddress;
            SentFromReplyAddress = sentFromReplyAddress;
            SentToAddress = sentToAddress;
            SentToBccAddresses = sentToBccAddresses;
            SentToCcAddresses = sentToCcAddresses;
            Subject = subject;
        }

        public EmailSentQueryResultWithContent Copy(long? contactId = default, string headers = default, string htmlContent = default, long? id = default, string openedDate = default, string plainContent = default, string receivedDate = default, string sentDate = default, string sentFromAddress = default, string sentFromReplyAddress = default, string sentToAddress = default, string sentToBccAddresses = default, string sentToCcAddresses = default, string subject = default) => new EmailSentQueryResultWithContent(contactId: contactId ?? ContactId, headers: headers ?? Headers, htmlContent: htmlContent ?? HtmlContent, id: id ?? Id, openedDate: openedDate ?? OpenedDate, plainContent: plainContent ?? PlainContent, receivedDate: receivedDate ?? ReceivedDate, sentDate: sentDate ?? SentDate, sentFromAddress: sentFromAddress ?? SentFromAddress, sentFromReplyAddress: sentFromReplyAddress ?? SentFromReplyAddress, sentToAddress: sentToAddress ?? SentToAddress, sentToBccAddresses: sentToBccAddresses ?? SentToBccAddresses, sentToCcAddresses: sentToCcAddresses ?? SentToCcAddresses, subject: subject ?? Subject);
    }

    public class Goal : Record<Goal>
    {
        [JsonProperty("historical_contact_counts")]
        public readonly HistoricalCounts HistoricalContactCounts;
        [JsonProperty("id")]
        public readonly long Id;
        [JsonProperty("name")]
        public readonly string Name;
        [JsonProperty("next_sequence_ids")]
        public readonly Lst<long> NextSequenceIds;
        [JsonProperty("previous_sequence_ids")]
        public readonly Lst<long> PreviousSequenceIds;
        [JsonProperty("type")]
        public readonly Type Type;
        public Goal(HistoricalCounts historicalContactCounts = default, long id = default, string name = default, Lst<long> nextSequenceIds = default, Lst<long> previousSequenceIds = default, Type type = default)
        {
            HistoricalContactCounts = historicalContactCounts;
            Id = id;
            Name = name;
            NextSequenceIds = nextSequenceIds;
            PreviousSequenceIds = previousSequenceIds;
            Type = type;
        }

        public Goal Copy(HistoricalCounts historicalContactCounts = default, long? id = default, string name = default, Lst<long> nextSequenceIds = default, Lst<long> previousSequenceIds = default, Type type = default) => new Goal(historicalContactCounts: historicalContactCounts == default ? HistoricalContactCounts : historicalContactCounts, id: id ?? Id, name: name ?? Name, nextSequenceIds: nextSequenceIds == default ? NextSequenceIds : nextSequenceIds, previousSequenceIds: previousSequenceIds == default ? PreviousSequenceIds : previousSequenceIds, type: type == default ? Type : type);
    }

    public class FullContact : Record<FullContact>
    {
        [JsonProperty("addresses")]
        public readonly Lst<Address> Addresses;
        [JsonProperty("anniversary")]
        public readonly string Anniversary;
        [JsonProperty("birthday")]
        public readonly string Birthday;
        [JsonProperty("company")]
        public readonly CompanyReference Company;
        [JsonProperty("contact_type")]
        public readonly string ContactType;
        [JsonProperty("custom_fields")]
        public readonly Lst<CustomFieldValue> CustomFields;
        [JsonProperty("date_created")]
        public readonly string DateCreated;
        [JsonProperty("email_addresses")]
        public readonly Lst<EmailAddress> EmailAddresses;
        [JsonProperty("email_opted_in")]
        public readonly bool EmailOptedIn;
        [JsonProperty("email_status")]
        public readonly EmailStatus EmailStatus;
        [JsonProperty("family_name")]
        public readonly string FamilyName;
        [JsonProperty("fax_numbers")]
        public readonly Lst<FaxNumber> FaxNumbers;
        [JsonProperty("given_name")]
        public readonly string GivenName;
        [JsonProperty("id")]
        public readonly long Id;
        [JsonProperty("job_title")]
        public readonly string JobTitle;
        [JsonProperty("last_updated")]
        public readonly string LastUpdated;
        [JsonProperty("lead_source_id")]
        public readonly long LeadSourceId;
        [JsonProperty("middle_name")]
        public readonly string MiddleName;
        [JsonProperty("notes")]
        public readonly string Notes;
        [JsonProperty("opt_in_reason")]
        public readonly string OptInReason;
        [JsonProperty("owner_id")]
        public readonly long OwnerId;
        [JsonProperty("phone_numbers")]
        public readonly Lst<PhoneNumber> PhoneNumbers;
        [JsonProperty("preferred_locale")]
        public readonly string PreferredLocale;
        [JsonProperty("preferred_name")]
        public readonly string PreferredName;
        [JsonProperty("prefix")]
        public readonly string Prefix;
        [JsonProperty("relationships")]
        public readonly Lst<Relationship> Relationships;
        [JsonProperty("social_accounts")]
        public readonly Lst<SocialAccount> SocialAccounts;
        [JsonProperty("source_type")]
        public readonly SourceType SourceType;
        [JsonProperty("spouse_name")]
        public readonly string SpouseName;
        [JsonProperty("suffix")]
        public readonly string Suffix;
        [JsonProperty("tag_ids")]
        public readonly Lst<long> TagIds;
        [JsonProperty("time_zone")]
        public readonly string TimeZone;
        [JsonProperty("website")]
        public readonly string Website;
        public FullContact(Lst<Address> addresses = default, string anniversary = default, string birthday = default, CompanyReference company = default, string contactType = default, Lst<CustomFieldValue> customFields = default, string dateCreated = default, Lst<EmailAddress> emailAddresses = default, bool emailOptedIn = default, EmailStatus emailStatus = default, string familyName = default, Lst<FaxNumber> faxNumbers = default, string givenName = default, long id = default, string jobTitle = default, string lastUpdated = default, long leadSourceId = default, string middleName = default, string notes = default, string optInReason = default, long ownerId = default, Lst<PhoneNumber> phoneNumbers = default, string preferredLocale = default, string preferredName = default, string prefix = default, Lst<Relationship> relationships = default, Lst<SocialAccount> socialAccounts = default, SourceType sourceType = default, string spouseName = default, string suffix = default, Lst<long> tagIds = default, string timeZone = default, string website = default)
        {
            Addresses = addresses;
            Anniversary = anniversary;
            Birthday = birthday;
            Company = company;
            ContactType = contactType;
            CustomFields = customFields;
            DateCreated = dateCreated;
            EmailAddresses = emailAddresses;
            EmailOptedIn = emailOptedIn;
            EmailStatus = emailStatus;
            FamilyName = familyName;
            FaxNumbers = faxNumbers;
            GivenName = givenName;
            Id = id;
            JobTitle = jobTitle;
            LastUpdated = lastUpdated;
            LeadSourceId = leadSourceId;
            MiddleName = middleName;
            Notes = notes;
            OptInReason = optInReason;
            OwnerId = ownerId;
            PhoneNumbers = phoneNumbers;
            PreferredLocale = preferredLocale;
            PreferredName = preferredName;
            Prefix = prefix;
            Relationships = relationships;
            SocialAccounts = socialAccounts;
            SourceType = sourceType;
            SpouseName = spouseName;
            Suffix = suffix;
            TagIds = tagIds;
            TimeZone = timeZone;
            Website = website;
        }

        public FullContact Copy(Lst<Address> addresses = default, string anniversary = default, string birthday = default, CompanyReference company = default, string contactType = default, Lst<CustomFieldValue> customFields = default, string dateCreated = default, Lst<EmailAddress> emailAddresses = default, bool emailOptedIn = default, EmailStatus emailStatus = default, string familyName = default, Lst<FaxNumber> faxNumbers = default, string givenName = default, long? id = default, string jobTitle = default, string lastUpdated = default, long? leadSourceId = default, string middleName = default, string notes = default, string optInReason = default, long? ownerId = default, Lst<PhoneNumber> phoneNumbers = default, string preferredLocale = default, string preferredName = default, string prefix = default, Lst<Relationship> relationships = default, Lst<SocialAccount> socialAccounts = default, SourceType sourceType = default, string spouseName = default, string suffix = default, Lst<long> tagIds = default, string timeZone = default, string website = default) => new FullContact(addresses: addresses == default ? Addresses : addresses, anniversary: anniversary ?? Anniversary, birthday: birthday ?? Birthday, company: company == default ? Company : company, contactType: contactType ?? ContactType, customFields: customFields == default ? CustomFields : customFields, dateCreated: dateCreated ?? DateCreated, emailAddresses: emailAddresses == default ? EmailAddresses : emailAddresses, emailOptedIn: emailOptedIn == default ? EmailOptedIn : emailOptedIn, emailStatus: emailStatus == default ? EmailStatus : emailStatus, familyName: familyName ?? FamilyName, faxNumbers: faxNumbers == default ? FaxNumbers : faxNumbers, givenName: givenName ?? GivenName, id: id ?? Id, jobTitle: jobTitle ?? JobTitle, lastUpdated: lastUpdated ?? LastUpdated, leadSourceId: leadSourceId ?? LeadSourceId, middleName: middleName ?? MiddleName, notes: notes ?? Notes, optInReason: optInReason ?? OptInReason, ownerId: ownerId ?? OwnerId, phoneNumbers: phoneNumbers == default ? PhoneNumbers : phoneNumbers, preferredLocale: preferredLocale ?? PreferredLocale, preferredName: preferredName ?? PreferredName, prefix: prefix ?? Prefix, relationships: relationships == default ? Relationships : relationships, socialAccounts: socialAccounts == default ? SocialAccounts : socialAccounts, sourceType: sourceType == default ? SourceType : sourceType, spouseName: spouseName ?? SpouseName, suffix: suffix ?? Suffix, tagIds: tagIds == default ? TagIds : tagIds, timeZone: timeZone ?? TimeZone, website: website ?? Website);
    }

    public class FaxNumber : Record<FaxNumber>
    {
        [JsonProperty("field")]
        public readonly Field Field;
        [JsonProperty("number")]
        public readonly string Number;
        [JsonProperty("type")]
        public readonly string Type;
        public FaxNumber(Field field = default, string number = default, string type = default)
        {
            Field = field;
            Number = number;
            Type = type;
        }

        public FaxNumber Copy(Field field = default, string number = default, string type = default) => new FaxNumber(field: field == default ? Field : field, number: number ?? Number, type: type ?? Type);
    }

    public class OpportunityList : Record<OpportunityList>
    {
        [JsonProperty("count")]
        public readonly int Count;
        [JsonProperty("next")]
        public readonly string Next;
        [JsonProperty("opportunities")]
        public readonly Lst<Opportunity> Opportunities;
        [JsonProperty("previous")]
        public readonly string Previous;
        public OpportunityList(int count = default, string next = default, Lst<Opportunity> opportunities = default, string previous = default)
        {
            Count = count;
            Next = next;
            Opportunities = opportunities;
            Previous = previous;
        }

        public OpportunityList Copy(int? count = default, string next = default, Lst<Opportunity> opportunities = default, string previous = default) => new OpportunityList(count: count ?? Count, next: next ?? Next, opportunities: opportunities == default ? Opportunities : opportunities, previous: previous ?? Previous);
    }

    public class Tags : Record<Tags>
    {
        [JsonProperty("count")]
        public readonly int Count;
        [JsonProperty("next")]
        public readonly string Next;
        [JsonProperty("previous")]
        public readonly string Previous;
        [JsonProperty("tags")]
        public readonly Lst<Tag> InnerTags;
        public Tags(int count = default, string next = default, string previous = default, Lst<Tag> innerTags = default)
        {
            Count = count;
            Next = next;
            Previous = previous;
            InnerTags = innerTags;
        }

        public Tags Copy(int? count = default, string next = default, string previous = default, Lst<Tag> innerTags = default) => new Tags(count: count ?? Count, next: next ?? Next, previous: previous ?? Previous, innerTags: innerTags == default ? InnerTags : innerTags);
    }

    public class Order : Record<Order>
    {
        [JsonProperty("contact")]
        public readonly OrderContactDetails Contact;
        [JsonProperty("creation_date")]
        public readonly string CreationDate;
        [JsonProperty("id")]
        public readonly long Id;
        [JsonProperty("lead_affiliate_id")]
        public readonly long LeadAffiliateId;
        [JsonProperty("modification_date")]
        public readonly string ModificationDate;
        [JsonProperty("order_date")]
        public readonly string OrderDate;
        [JsonProperty("order_items")]
        public readonly Lst<OrderItem> OrderItems;
        [JsonProperty("recurring")]
        public readonly bool Recurring;
        [JsonProperty("refund_total")]
        public readonly int RefundTotal;
        [JsonProperty("sales_affiliate_id")]
        public readonly long SalesAffiliateId;
        [JsonProperty("shipping_information")]
        public readonly ShippingInformation ShippingInformation;
        [JsonProperty("status")]
        public readonly string Status;
        [JsonProperty("title")]
        public readonly string Title;
        [JsonProperty("total")]
        public readonly int Total;
        [JsonProperty("total_due")]
        public readonly int TotalDue;
        [JsonProperty("total_paid")]
        public readonly int TotalPaid;
        public Order(OrderContactDetails contact = default, string creationDate = default, long id = default, long leadAffiliateId = default, string modificationDate = default, string orderDate = default, Lst<OrderItem> orderItems = default, bool recurring = default, int refundTotal = default, long salesAffiliateId = default, ShippingInformation shippingInformation = default, string status = default, string title = default, int total = default, int totalDue = default, int totalPaid = default)
        {
            Contact = contact;
            CreationDate = creationDate;
            Id = id;
            LeadAffiliateId = leadAffiliateId;
            ModificationDate = modificationDate;
            OrderDate = orderDate;
            OrderItems = orderItems;
            Recurring = recurring;
            RefundTotal = refundTotal;
            SalesAffiliateId = salesAffiliateId;
            ShippingInformation = shippingInformation;
            Status = status;
            Title = title;
            Total = total;
            TotalDue = totalDue;
            TotalPaid = totalPaid;
        }

        public Order Copy(OrderContactDetails contact = default, string creationDate = default, long? id = default, long? leadAffiliateId = default, string modificationDate = default, string orderDate = default, Lst<OrderItem> orderItems = default, bool recurring = default, int? refundTotal = default, long? salesAffiliateId = default, ShippingInformation shippingInformation = default, string status = default, string title = default, int? total = default, int? totalDue = default, int? totalPaid = default) => new Order(contact: contact == default ? Contact : contact, creationDate: creationDate ?? CreationDate, id: id ?? Id, leadAffiliateId: leadAffiliateId ?? LeadAffiliateId, modificationDate: modificationDate ?? ModificationDate, orderDate: orderDate ?? OrderDate, orderItems: orderItems == default ? OrderItems : orderItems, recurring: recurring == default ? Recurring : recurring, refundTotal: refundTotal ?? RefundTotal, salesAffiliateId: salesAffiliateId ?? SalesAffiliateId, shippingInformation: shippingInformation == default ? ShippingInformation : shippingInformation, status: status ?? Status, title: title ?? Title, total: total ?? Total, totalDue: totalDue ?? TotalDue, totalPaid: totalPaid ?? TotalPaid);
    }

    public class FileList : Record<FileList>
    {
        [JsonProperty("count")]
        public readonly int Count;
        [JsonProperty("files")]
        public readonly Lst<FileDescriptor> Files;
        [JsonProperty("next")]
        public readonly string Next;
        [JsonProperty("previous")]
        public readonly string Previous;
        public FileList(int count = default, Lst<FileDescriptor> files = default, string next = default, string previous = default)
        {
            Count = count;
            Files = files;
            Next = next;
            Previous = previous;
        }

        public FileList Copy(int? count = default, Lst<FileDescriptor> files = default, string next = default, string previous = default) => new FileList(count: count ?? Count, files: files == default ? Files : files, next: next ?? Next, previous: previous ?? Previous);
    }

    public class Setting : Record<Setting>
    {
        [JsonProperty("value")]
        public readonly string Value;
        public Setting(string value = default)
        {
            Value = value;
        }

        public Setting Copy(string value = default) => new Setting(value: value ?? Value);
    }

    public class AffiliateCommission : Record<AffiliateCommission>
    {
        [JsonProperty("amount_earned")]
        public readonly int AmountEarned;
        [JsonProperty("contact_first_name")]
        public readonly string ContactFirstName;
        [JsonProperty("contact_id")]
        public readonly long ContactId;
        [JsonProperty("contact_last_name")]
        public readonly string ContactLastName;
        [JsonProperty("date_earned")]
        public readonly string DateEarned;
        [JsonProperty("description")]
        public readonly string Description;
        [JsonProperty("invoice_id")]
        public readonly long InvoiceId;
        [JsonProperty("product_name")]
        public readonly string ProductName;
        [JsonProperty("sales_affiliate_id")]
        public readonly long SalesAffiliateId;
        [JsonProperty("sold_by_first_name")]
        public readonly string SoldByFirstName;
        [JsonProperty("sold_by_last_name")]
        public readonly string SoldByLastName;
        public AffiliateCommission(int amountEarned = default, string contactFirstName = default, long contactId = default, string contactLastName = default, string dateEarned = default, string description = default, long invoiceId = default, string productName = default, long salesAffiliateId = default, string soldByFirstName = default, string soldByLastName = default)
        {
            AmountEarned = amountEarned;
            ContactFirstName = contactFirstName;
            ContactId = contactId;
            ContactLastName = contactLastName;
            DateEarned = dateEarned;
            Description = description;
            InvoiceId = invoiceId;
            ProductName = productName;
            SalesAffiliateId = salesAffiliateId;
            SoldByFirstName = soldByFirstName;
            SoldByLastName = soldByLastName;
        }

        public AffiliateCommission Copy(int? amountEarned = default, string contactFirstName = default, long? contactId = default, string contactLastName = default, string dateEarned = default, string description = default, long? invoiceId = default, string productName = default, long? salesAffiliateId = default, string soldByFirstName = default, string soldByLastName = default) => new AffiliateCommission(amountEarned: amountEarned ?? AmountEarned, contactFirstName: contactFirstName ?? ContactFirstName, contactId: contactId ?? ContactId, contactLastName: contactLastName ?? ContactLastName, dateEarned: dateEarned ?? DateEarned, description: description ?? Description, invoiceId: invoiceId ?? InvoiceId, productName: productName ?? ProductName, salesAffiliateId: salesAffiliateId ?? SalesAffiliateId, soldByFirstName: soldByFirstName ?? SoldByFirstName, soldByLastName: soldByLastName ?? SoldByLastName);
    }

    public class Sequence : Record<Sequence>
    {
        [JsonProperty("active_contact_count")]
        public readonly int ActiveContactCount;
        [JsonProperty("active_contact_count_completed")]
        public readonly int ActiveContactCountCompleted;
        [JsonProperty("historical_contact_count")]
        public readonly HistoricalCounts HistoricalContactCount;
        [JsonProperty("id")]
        public readonly long Id;
        [JsonProperty("name")]
        public readonly string Name;
        [JsonProperty("paths")]
        public readonly Lst<SequencePath> Paths;
        public Sequence(int activeContactCount = default, int activeContactCountCompleted = default, HistoricalCounts historicalContactCount = default, long id = default, string name = default, Lst<SequencePath> paths = default)
        {
            ActiveContactCount = activeContactCount;
            ActiveContactCountCompleted = activeContactCountCompleted;
            HistoricalContactCount = historicalContactCount;
            Id = id;
            Name = name;
            Paths = paths;
        }

        public Sequence Copy(int? activeContactCount = default, int? activeContactCountCompleted = default, HistoricalCounts historicalContactCount = default, long? id = default, string name = default, Lst<SequencePath> paths = default) => new Sequence(activeContactCount: activeContactCount ?? ActiveContactCount, activeContactCountCompleted: activeContactCountCompleted ?? ActiveContactCountCompleted, historicalContactCount: historicalContactCount == default ? HistoricalContactCount : historicalContactCount, id: id ?? Id, name: name ?? Name, paths: paths == default ? Paths : paths);
    }

    public class TransactionList : Record<TransactionList>
    {
        [JsonProperty("count")]
        public readonly int Count;
        [JsonProperty("next")]
        public readonly string Next;
        [JsonProperty("previous")]
        public readonly string Previous;
        [JsonProperty("transactions")]
        public readonly Lst<Transaction> Transactions;
        public TransactionList(int count = default, string next = default, string previous = default, Lst<Transaction> transactions = default)
        {
            Count = count;
            Next = next;
            Previous = previous;
            Transactions = transactions;
        }

        public TransactionList Copy(int? count = default, string next = default, string previous = default, Lst<Transaction> transactions = default) => new TransactionList(count: count ?? Count, next: next ?? Next, previous: previous ?? Previous, transactions: transactions == default ? Transactions : transactions);
    }

    public class EmailAddress : Record<EmailAddress>
    {
        [JsonProperty("email")]
        public readonly string Email;
        [JsonProperty("field")]
        public readonly Field Field;
        public EmailAddress(string email = default, Field field = default)
        {
            Email = email;
            Field = field;
        }

        public EmailAddress Copy(string email = default, Field field = default) => new EmailAddress(email: email ?? Email, field: field == default ? Field : field);
    }

    public class CompanyPhoneNumber : Record<CompanyPhoneNumber>
    {
        [JsonProperty("extension")]
        public readonly string Extension;
        [JsonProperty("number")]
        public readonly string Number;
        [JsonProperty("type")]
        public readonly string Type;
        public CompanyPhoneNumber(string extension = default, string number = default, string type = default)
        {
            Extension = extension;
            Number = number;
            Type = type;
        }

        public CompanyPhoneNumber Copy(string extension = default, string number = default, string type = default) => new CompanyPhoneNumber(extension: extension ?? Extension, number: number ?? Number, type: type ?? Type);
    }

    public class UpsertContact : Record<UpsertContact>
    {
        [JsonProperty("addresses")]
        public readonly Lst<Address> Addresses;
        [JsonProperty("anniversary")]
        public readonly string Anniversary;
        [JsonProperty("birthday")]
        public readonly string Birthday;
        [JsonProperty("company")]
        public readonly RequestCompanyReference Company;
        [JsonProperty("contact_type")]
        public readonly string ContactType;
        [JsonProperty("custom_fields")]
        public readonly Lst<CustomFieldValue> CustomFields;
        [JsonProperty("duplicate_option")]
        public readonly DuplicateOption DuplicateOption;
        [JsonProperty("email_addresses")]
        public readonly Lst<EmailAddress> EmailAddresses;
        [JsonProperty("family_name")]
        public readonly string FamilyName;
        [JsonProperty("fax_numbers")]
        public readonly Lst<FaxNumber> FaxNumbers;
        [JsonProperty("given_name")]
        public readonly string GivenName;
        [JsonProperty("job_title")]
        public readonly string JobTitle;
        [JsonProperty("lead_source_id")]
        public readonly long LeadSourceId;
        [JsonProperty("middle_name")]
        public readonly string MiddleName;
        [JsonProperty("notes")]
        public readonly string Notes;
        [JsonProperty("opt_in_reason")]
        public readonly string OptInReason;
        [JsonProperty("owner_id")]
        public readonly long OwnerId;
        [JsonProperty("phone_numbers")]
        public readonly Lst<PhoneNumber> PhoneNumbers;
        [JsonProperty("preferred_locale")]
        public readonly string PreferredLocale;
        [JsonProperty("preferred_name")]
        public readonly string PreferredName;
        [JsonProperty("prefix")]
        public readonly string Prefix;
        [JsonProperty("social_accounts")]
        public readonly Lst<SocialAccount> SocialAccounts;
        [JsonProperty("source_type")]
        public readonly SourceType SourceType;
        [JsonProperty("spouse_name")]
        public readonly string SpouseName;
        [JsonProperty("suffix")]
        public readonly string Suffix;
        [JsonProperty("time_zone")]
        public readonly string TimeZone;
        [JsonProperty("website")]
        public readonly string Website;
        public UpsertContact(Lst<Address> addresses = default, string anniversary = default, string birthday = default, RequestCompanyReference company = default, string contactType = default, Lst<CustomFieldValue> customFields = default, DuplicateOption duplicateOption = default, Lst<EmailAddress> emailAddresses = default, string familyName = default, Lst<FaxNumber> faxNumbers = default, string givenName = default, string jobTitle = default, long leadSourceId = default, string middleName = default, string notes = default, string optInReason = default, long ownerId = default, Lst<PhoneNumber> phoneNumbers = default, string preferredLocale = default, string preferredName = default, string prefix = default, Lst<SocialAccount> socialAccounts = default, SourceType sourceType = default, string spouseName = default, string suffix = default, string timeZone = default, string website = default)
        {
            Addresses = addresses;
            Anniversary = anniversary;
            Birthday = birthday;
            Company = company;
            ContactType = contactType;
            CustomFields = customFields;
            DuplicateOption = duplicateOption;
            EmailAddresses = emailAddresses;
            FamilyName = familyName;
            FaxNumbers = faxNumbers;
            GivenName = givenName;
            JobTitle = jobTitle;
            LeadSourceId = leadSourceId;
            MiddleName = middleName;
            Notes = notes;
            OptInReason = optInReason;
            OwnerId = ownerId;
            PhoneNumbers = phoneNumbers;
            PreferredLocale = preferredLocale;
            PreferredName = preferredName;
            Prefix = prefix;
            SocialAccounts = socialAccounts;
            SourceType = sourceType;
            SpouseName = spouseName;
            Suffix = suffix;
            TimeZone = timeZone;
            Website = website;
        }

        public UpsertContact Copy(Lst<Address> addresses = default, string anniversary = default, string birthday = default, RequestCompanyReference company = default, string contactType = default, Lst<CustomFieldValue> customFields = default, DuplicateOption duplicateOption = default, Lst<EmailAddress> emailAddresses = default, string familyName = default, Lst<FaxNumber> faxNumbers = default, string givenName = default, string jobTitle = default, long? leadSourceId = default, string middleName = default, string notes = default, string optInReason = default, long? ownerId = default, Lst<PhoneNumber> phoneNumbers = default, string preferredLocale = default, string preferredName = default, string prefix = default, Lst<SocialAccount> socialAccounts = default, SourceType sourceType = default, string spouseName = default, string suffix = default, string timeZone = default, string website = default) => new UpsertContact(addresses: addresses == default ? Addresses : addresses, anniversary: anniversary ?? Anniversary, birthday: birthday ?? Birthday, company: company == default ? Company : company, contactType: contactType ?? ContactType, customFields: customFields == default ? CustomFields : customFields, duplicateOption: duplicateOption == default ? DuplicateOption : duplicateOption, emailAddresses: emailAddresses == default ? EmailAddresses : emailAddresses, familyName: familyName ?? FamilyName, faxNumbers: faxNumbers == default ? FaxNumbers : faxNumbers, givenName: givenName ?? GivenName, jobTitle: jobTitle ?? JobTitle, leadSourceId: leadSourceId ?? LeadSourceId, middleName: middleName ?? MiddleName, notes: notes ?? Notes, optInReason: optInReason ?? OptInReason, ownerId: ownerId ?? OwnerId, phoneNumbers: phoneNumbers == default ? PhoneNumbers : phoneNumbers, preferredLocale: preferredLocale ?? PreferredLocale, preferredName: preferredName ?? PreferredName, prefix: prefix ?? Prefix, socialAccounts: socialAccounts == default ? SocialAccounts : socialAccounts, sourceType: sourceType == default ? SourceType : sourceType, spouseName: spouseName ?? SpouseName, suffix: suffix ?? Suffix, timeZone: timeZone ?? TimeZone, website: website ?? Website);
    }

    public class Campaign : Record<Campaign>
    {
        [JsonProperty("active_contact_count")]
        public readonly int ActiveContactCount;
        [JsonProperty("completed_contact_count")]
        public readonly int CompletedContactCount;
        [JsonProperty("created_by_global_id")]
        public readonly long CreatedByGlobalId;
        [JsonProperty("date_created")]
        public readonly string DateCreated;
        [JsonProperty("error_message")]
        public readonly string ErrorMessage;
        [JsonProperty("goals")]
        public readonly Lst<Goal> Goals;
        [JsonProperty("id")]
        public readonly long Id;
        [JsonProperty("locked")]
        public readonly bool Locked;
        [JsonProperty("name")]
        public readonly string Name;
        [JsonProperty("published_date")]
        public readonly string PublishedDate;
        [JsonProperty("published_status")]
        public readonly bool PublishedStatus;
        [JsonProperty("published_time_zone")]
        public readonly string PublishedTimeZone;
        [JsonProperty("sequences")]
        public readonly Lst<Sequence> Sequences;
        [JsonProperty("time_zone")]
        public readonly string TimeZone;
        public Campaign(int activeContactCount = default, int completedContactCount = default, long createdByGlobalId = default, string dateCreated = default, string errorMessage = default, Lst<Goal> goals = default, long id = default, bool locked = default, string name = default, string publishedDate = default, bool publishedStatus = default, string publishedTimeZone = default, Lst<Sequence> sequences = default, string timeZone = default)
        {
            ActiveContactCount = activeContactCount;
            CompletedContactCount = completedContactCount;
            CreatedByGlobalId = createdByGlobalId;
            DateCreated = dateCreated;
            ErrorMessage = errorMessage;
            Goals = goals;
            Id = id;
            Locked = locked;
            Name = name;
            PublishedDate = publishedDate;
            PublishedStatus = publishedStatus;
            PublishedTimeZone = publishedTimeZone;
            Sequences = sequences;
            TimeZone = timeZone;
        }

        public Campaign Copy(int? activeContactCount = default, int? completedContactCount = default, long? createdByGlobalId = default, string dateCreated = default, string errorMessage = default, Lst<Goal> goals = default, long? id = default, bool locked = default, string name = default, string publishedDate = default, bool publishedStatus = default, string publishedTimeZone = default, Lst<Sequence> sequences = default, string timeZone = default) => new Campaign(activeContactCount: activeContactCount ?? ActiveContactCount, completedContactCount: completedContactCount ?? CompletedContactCount, createdByGlobalId: createdByGlobalId ?? CreatedByGlobalId, dateCreated: dateCreated ?? DateCreated, errorMessage: errorMessage ?? ErrorMessage, goals: goals == default ? Goals : goals, id: id ?? Id, locked: locked == default ? Locked : locked, name: name ?? Name, publishedDate: publishedDate ?? PublishedDate, publishedStatus: publishedStatus == default ? PublishedStatus : publishedStatus, publishedTimeZone: publishedTimeZone ?? PublishedTimeZone, sequences: sequences == default ? Sequences : sequences, timeZone: timeZone ?? TimeZone);
    }

    public class CreditCardAdded : Record<CreditCardAdded>
    {
        [JsonProperty("address")]
        public readonly Address Address;
        [JsonProperty("card_type")]
        public readonly string CardType;
        [JsonProperty("contact_id")]
        public readonly long ContactId;
        [JsonProperty("email_address")]
        public readonly string EmailAddress;
        [JsonProperty("expiration_month")]
        public readonly string ExpirationMonth;
        [JsonProperty("expiration_year")]
        public readonly string ExpirationYear;
        [JsonProperty("id")]
        public readonly long Id;
        [JsonProperty("maestro_issue_number")]
        public readonly string MaestroIssueNumber;
        [JsonProperty("maestro_start_date_month")]
        public readonly string MaestroStartDateMonth;
        [JsonProperty("maestro_start_date_year")]
        public readonly string MaestroStartDateYear;
        [JsonProperty("name_on_card")]
        public readonly string NameOnCard;
        [JsonProperty("validation_message")]
        public readonly string ValidationMessage;
        [JsonProperty("validation_status")]
        public readonly string ValidationStatus;
        public CreditCardAdded(Address address = default, string cardType = default, long contactId = default, string emailAddress = default, string expirationMonth = default, string expirationYear = default, long id = default, string maestroIssueNumber = default, string maestroStartDateMonth = default, string maestroStartDateYear = default, string nameOnCard = default, string validationMessage = default, string validationStatus = default)
        {
            Address = address;
            CardType = cardType;
            ContactId = contactId;
            EmailAddress = emailAddress;
            ExpirationMonth = expirationMonth;
            ExpirationYear = expirationYear;
            Id = id;
            MaestroIssueNumber = maestroIssueNumber;
            MaestroStartDateMonth = maestroStartDateMonth;
            MaestroStartDateYear = maestroStartDateYear;
            NameOnCard = nameOnCard;
            ValidationMessage = validationMessage;
            ValidationStatus = validationStatus;
        }

        public CreditCardAdded Copy(Address address = default, string cardType = default, long? contactId = default, string emailAddress = default, string expirationMonth = default, string expirationYear = default, long? id = default, string maestroIssueNumber = default, string maestroStartDateMonth = default, string maestroStartDateYear = default, string nameOnCard = default, string validationMessage = default, string validationStatus = default) => new CreditCardAdded(address: address == default ? Address : address, cardType: cardType ?? CardType, contactId: contactId ?? ContactId, emailAddress: emailAddress ?? EmailAddress, expirationMonth: expirationMonth ?? ExpirationMonth, expirationYear: expirationYear ?? ExpirationYear, id: id ?? Id, maestroIssueNumber: maestroIssueNumber ?? MaestroIssueNumber, maestroStartDateMonth: maestroStartDateMonth ?? MaestroStartDateMonth, maestroStartDateYear: maestroStartDateYear ?? MaestroStartDateYear, nameOnCard: nameOnCard ?? NameOnCard, validationMessage: validationMessage ?? ValidationMessage, validationStatus: validationStatus ?? ValidationStatus);
    }

    public class Transaction : Record<Transaction>
    {
        [JsonProperty("amount")]
        public readonly int Amount;
        [JsonProperty("collection_method")]
        public readonly string CollectionMethod;
        [JsonProperty("contact_id")]
        public readonly long ContactId;
        [JsonProperty("currency")]
        public readonly string Currency;
        [JsonProperty("errors")]
        public readonly string Errors;
        [JsonProperty("gateway")]
        public readonly string Gateway;
        [JsonProperty("gateway_account_name")]
        public readonly string GatewayAccountName;
        [JsonProperty("id")]
        public readonly long Id;
        [JsonProperty("order_ids")]
        public readonly string OrderIds;
        [JsonProperty("orders")]
        public readonly Lst<Order> Orders;
        [JsonProperty("status")]
        public readonly string Status;
        [JsonProperty("test")]
        public readonly bool Test;
        [JsonProperty("transaction_date")]
        public readonly string TransactionDate;
        [JsonProperty("type")]
        public readonly string Type;
        public Transaction(int amount = default, string collectionMethod = default, long contactId = default, string currency = default, string errors = default, string gateway = default, string gatewayAccountName = default, long id = default, string orderIds = default, Lst<Order> orders = default, string status = default, bool test = default, string transactionDate = default, string type = default)
        {
            Amount = amount;
            CollectionMethod = collectionMethod;
            ContactId = contactId;
            Currency = currency;
            Errors = errors;
            Gateway = gateway;
            GatewayAccountName = gatewayAccountName;
            Id = id;
            OrderIds = orderIds;
            Orders = orders;
            Status = status;
            Test = test;
            TransactionDate = transactionDate;
            Type = type;
        }

        public Transaction Copy(int? amount = default, string collectionMethod = default, long? contactId = default, string currency = default, string errors = default, string gateway = default, string gatewayAccountName = default, long? id = default, string orderIds = default, Lst<Order> orders = default, string status = default, bool test = default, string transactionDate = default, string type = default) => new Transaction(amount: amount ?? Amount, collectionMethod: collectionMethod ?? CollectionMethod, contactId: contactId ?? ContactId, currency: currency ?? Currency, errors: errors ?? Errors, gateway: gateway ?? Gateway, gatewayAccountName: gatewayAccountName ?? GatewayAccountName, id: id ?? Id, orderIds: orderIds ?? OrderIds, orders: orders == default ? Orders : orders, status: status ?? Status, test: test == default ? Test : test, transactionDate: transactionDate ?? TransactionDate, type: type ?? Type);
    }

    public class BasicContact : Record<BasicContact>
    {
        [JsonProperty("email")]
        public readonly string Email;
        [JsonProperty("first_name")]
        public readonly string FirstName;
        [JsonProperty("id")]
        public readonly long Id;
        [JsonProperty("last_name")]
        public readonly string LastName;
        public BasicContact(string email = default, string firstName = default, long id = default, string lastName = default)
        {
            Email = email;
            FirstName = firstName;
            Id = id;
            LastName = lastName;
        }

        public BasicContact Copy(string email = default, string firstName = default, long? id = default, string lastName = default) => new BasicContact(email: email ?? Email, firstName: firstName ?? FirstName, id: id ?? Id, lastName: lastName ?? LastName);
    }

    public class TaggedContact : Record<TaggedContact>
    {
        [JsonProperty("contact")]
        public readonly BasicContact Contact;
        [JsonProperty("date_applied")]
        public readonly string DateApplied;
        public TaggedContact(BasicContact contact = default, string dateApplied = default)
        {
            Contact = contact;
            DateApplied = dateApplied;
        }

        public TaggedContact Copy(BasicContact contact = default, string dateApplied = default) => new TaggedContact(contact: contact == default ? Contact : contact, dateApplied: dateApplied ?? DateApplied);
    }

    public class Throwable : Record<Throwable>
    {
        [JsonProperty("cause")]
        public readonly Throwable Cause;
        [JsonProperty("localizedMessage")]
        public readonly string LocalizedMessage;
        [JsonProperty("message")]
        public readonly string Message;
        [JsonProperty("stackTrace")]
        public readonly Lst<StackTraceElement> StackTrace;
        [JsonProperty("suppressed")]
        public readonly Lst<Throwable> Suppressed;
        public Throwable(Throwable cause = default, string localizedMessage = default, string message = default, Lst<StackTraceElement> stackTrace = default, Lst<Throwable> suppressed = default)
        {
            Cause = cause;
            LocalizedMessage = localizedMessage;
            Message = message;
            StackTrace = stackTrace;
            Suppressed = suppressed;
        }

        public Throwable Copy(Throwable cause = default, string localizedMessage = default, string message = default, Lst<StackTraceElement> stackTrace = default, Lst<Throwable> suppressed = default) => new Throwable(cause: cause == default ? Cause : cause, localizedMessage: localizedMessage ?? LocalizedMessage, message: message ?? Message, stackTrace: stackTrace == default ? StackTrace : stackTrace, suppressed: suppressed == default ? Suppressed : suppressed);
    }

    public class UserInfoDTO : Record<UserInfoDTO>
    {
        [JsonProperty("email")]
        public readonly string Email;
        [JsonProperty("family_name")]
        public readonly string FamilyName;
        [JsonProperty("given_name")]
        public readonly string GivenName;
        [JsonProperty("global_user_id")]
        public readonly long GlobalUserId;
        [JsonProperty("infusionsoft_id")]
        public readonly string InfusionsoftId;
        [JsonProperty("middle_name")]
        public readonly string MiddleName;
        [JsonProperty("preferred_name")]
        public readonly string PreferredName;
        [JsonProperty("sub")]
        public readonly string Sub;
        public UserInfoDTO(string email = default, string familyName = default, string givenName = default, long globalUserId = default, string infusionsoftId = default, string middleName = default, string preferredName = default, string sub = default)
        {
            Email = email;
            FamilyName = familyName;
            GivenName = givenName;
            GlobalUserId = globalUserId;
            InfusionsoftId = infusionsoftId;
            MiddleName = middleName;
            PreferredName = preferredName;
            Sub = sub;
        }

        public UserInfoDTO Copy(string email = default, string familyName = default, string givenName = default, long? globalUserId = default, string infusionsoftId = default, string middleName = default, string preferredName = default, string sub = default) => new UserInfoDTO(email: email ?? Email, familyName: familyName ?? FamilyName, givenName: givenName ?? GivenName, globalUserId: globalUserId ?? GlobalUserId, infusionsoftId: infusionsoftId ?? InfusionsoftId, middleName: middleName ?? MiddleName, preferredName: preferredName ?? PreferredName, sub: sub ?? Sub);
    }

    public class SimpleTag : Record<SimpleTag>
    {
        [JsonProperty("category")]
        public readonly string Category;
        [JsonProperty("id")]
        public readonly long Id;
        [JsonProperty("name")]
        public readonly string Name;
        public SimpleTag(string category = default, long id = default, string name = default)
        {
            Category = category;
            Id = id;
            Name = name;
        }

        public SimpleTag Copy(string category = default, long? id = default, string name = default) => new SimpleTag(category: category ?? Category, id: id ?? Id, name: name ?? Name);
    }

    public class ContactTagList : Record<ContactTagList>
    {
        [JsonProperty("count")]
        public readonly int Count;
        [JsonProperty("next")]
        public readonly string Next;
        [JsonProperty("previous")]
        public readonly string Previous;
        [JsonProperty("tags")]
        public readonly Lst<ContactTag> Tags;
        public ContactTagList(int count = default, string next = default, string previous = default, Lst<ContactTag> tags = default)
        {
            Count = count;
            Next = next;
            Previous = previous;
            Tags = tags;
        }

        public ContactTagList Copy(int? count = default, string next = default, string previous = default, Lst<ContactTag> tags = default) => new ContactTagList(count: count ?? Count, next: next ?? Next, previous: previous ?? Previous, tags: tags == default ? Tags : tags);
    }

    public class CreateTagCategory : Record<CreateTagCategory>
    {
        [JsonProperty("description")]
        public readonly string Description;
        [JsonProperty("name")]
        public readonly string Name;
        public CreateTagCategory(string description = default, string name = default)
        {
            Description = description;
            Name = name;
        }

        public CreateTagCategory Copy(string description = default, string name = default) => new CreateTagCategory(description: description ?? Description, name: name ?? Name);
    }

    public class CreateTag : Record<CreateTag>
    {
        [JsonProperty("category")]
        public readonly CategoryReference Category;
        [JsonProperty("description")]
        public readonly string Description;
        [JsonProperty("name")]
        public readonly string Name;
        public CreateTag(CategoryReference category = default, string description = default, string name = default)
        {
            Category = category;
            Description = description;
            Name = name;
        }

        public CreateTag Copy(CategoryReference category = default, string description = default, string name = default) => new CreateTag(category: category == default ? Category : category, description: description ?? Description, name: name ?? Name);
    }

    public class ProductStatusList : Record<ProductStatusList>
    {
        [JsonProperty("count")]
        public readonly int Count;
        [JsonProperty("next")]
        public readonly string Next;
        [JsonProperty("previous")]
        public readonly string Previous;
        [JsonProperty("product_statuses")]
        public readonly Lst<ProductStatus> ProductStatuses;
        [JsonProperty("sync_token")]
        public readonly string SyncToken;
        public ProductStatusList(int count = default, string next = default, string previous = default, Lst<ProductStatus> productStatuses = default, string syncToken = default)
        {
            Count = count;
            Next = next;
            Previous = previous;
            ProductStatuses = productStatuses;
            SyncToken = syncToken;
        }

        public ProductStatusList Copy(int? count = default, string next = default, string previous = default, Lst<ProductStatus> productStatuses = default, string syncToken = default) => new ProductStatusList(count: count ?? Count, next: next ?? Next, previous: previous ?? Previous, productStatuses: productStatuses == default ? ProductStatuses : productStatuses, syncToken: syncToken ?? SyncToken);
    }

    public class ObjectModel : Record<ObjectModel>
    {
        [JsonProperty("custom_fields")]
        public readonly Lst<CustomFieldMetaData> CustomFields;
        [JsonProperty("optional_properties")]
        public readonly Lst<string> OptionalProperties;
        public ObjectModel(Lst<CustomFieldMetaData> customFields = default, Lst<string> optionalProperties = default)
        {
            CustomFields = customFields;
            OptionalProperties = optionalProperties;
        }

        public ObjectModel Copy(Lst<CustomFieldMetaData> customFields = default, Lst<string> optionalProperties = default) => new ObjectModel(customFields: customFields == default ? CustomFields : customFields, optionalProperties: optionalProperties == default ? OptionalProperties : optionalProperties);
    }

    public class SimpleUser : Record<SimpleUser>
    {
        [JsonProperty("first_name")]
        public readonly string FirstName;
        [JsonProperty("id")]
        public readonly long Id;
        [JsonProperty("last_name")]
        public readonly string LastName;
        public SimpleUser(string firstName = default, long id = default, string lastName = default)
        {
            FirstName = firstName;
            Id = id;
            LastName = lastName;
        }

        public SimpleUser Copy(string firstName = default, long? id = default, string lastName = default) => new SimpleUser(firstName: firstName ?? FirstName, id: id ?? Id, lastName: lastName ?? LastName);
    }

    public class TaggedContactList : Record<TaggedContactList>
    {
        [JsonProperty("contacts")]
        public readonly Lst<TaggedContact> Contacts;
        [JsonProperty("count")]
        public readonly int Count;
        [JsonProperty("next")]
        public readonly string Next;
        [JsonProperty("previous")]
        public readonly string Previous;
        public TaggedContactList(Lst<TaggedContact> contacts = default, int count = default, string next = default, string previous = default)
        {
            Contacts = contacts;
            Count = count;
            Next = next;
            Previous = previous;
        }

        public TaggedContactList Copy(Lst<TaggedContact> contacts = default, int? count = default, string next = default, string previous = default) => new TaggedContactList(contacts: contacts == default ? Contacts : contacts, count: count ?? Count, next: next ?? Next, previous: previous ?? Previous);
    }

    public class CompanyReference : Record<CompanyReference>
    {
        [JsonProperty("company_name")]
        public readonly string CompanyName;
        [JsonProperty("id")]
        public readonly long Id;
        public CompanyReference(string companyName = default, long id = default)
        {
            CompanyName = companyName;
            Id = id;
        }

        public CompanyReference Copy(string companyName = default, long? id = default) => new CompanyReference(companyName: companyName ?? CompanyName, id: id ?? Id);
    }

    public class AccountProfile : Record<AccountProfile>
    {
        [JsonProperty("address")]
        public readonly Address Address;
        [JsonProperty("business_goals")]
        public readonly Lst<string> BusinessGoals;
        [JsonProperty("business_type")]
        public readonly string BusinessType;
        [JsonProperty("currency_code")]
        public readonly string CurrencyCode;
        [JsonProperty("email")]
        public readonly string Email;
        [JsonProperty("language_tag")]
        public readonly string LanguageTag;
        [JsonProperty("logo_url")]
        public readonly string LogoUrl;
        [JsonProperty("name")]
        public readonly string Name;
        [JsonProperty("phone")]
        public readonly string Phone;
        [JsonProperty("phone_ext")]
        public readonly string PhoneExt;
        [JsonProperty("time_zone")]
        public readonly string TimeZone;
        [JsonProperty("website")]
        public readonly string Website;
        public AccountProfile(Address address = default, Lst<string> businessGoals = default, string businessType = default, string currencyCode = default, string email = default, string languageTag = default, string logoUrl = default, string name = default, string phone = default, string phoneExt = default, string timeZone = default, string website = default)
        {
            Address = address;
            BusinessGoals = businessGoals;
            BusinessType = businessType;
            CurrencyCode = currencyCode;
            Email = email;
            LanguageTag = languageTag;
            LogoUrl = logoUrl;
            Name = name;
            Phone = phone;
            PhoneExt = phoneExt;
            TimeZone = timeZone;
            Website = website;
        }

        public AccountProfile Copy(Address address = default, Lst<string> businessGoals = default, string businessType = default, string currencyCode = default, string email = default, string languageTag = default, string logoUrl = default, string name = default, string phone = default, string phoneExt = default, string timeZone = default, string website = default) => new AccountProfile(address: address == default ? Address : address, businessGoals: businessGoals == default ? BusinessGoals : businessGoals, businessType: businessType ?? BusinessType, currencyCode: currencyCode ?? CurrencyCode, email: email ?? Email, languageTag: languageTag ?? LanguageTag, logoUrl: logoUrl ?? LogoUrl, name: name ?? Name, phone: phone ?? Phone, phoneExt: phoneExt ?? PhoneExt, timeZone: timeZone ?? TimeZone, website: website ?? Website);
    }

    public class SimpleOpportunityStage : Record<SimpleOpportunityStage>
    {
        [JsonProperty("details")]
        public readonly StageDetails Details;
        [JsonProperty("id")]
        public readonly long Id;
        [JsonProperty("name")]
        public readonly string Name;
        [JsonProperty("reasons")]
        public readonly Lst<string> Reasons;
        public SimpleOpportunityStage(StageDetails details = default, long id = default, string name = default, Lst<string> reasons = default)
        {
            Details = details;
            Id = id;
            Name = name;
            Reasons = reasons;
        }

        public SimpleOpportunityStage Copy(StageDetails details = default, long? id = default, string name = default, Lst<string> reasons = default) => new SimpleOpportunityStage(details: details == default ? Details : details, id: id ?? Id, name: name ?? Name, reasons: reasons == default ? Reasons : reasons);
    }

    public class RestHookRequest : Record<RestHookRequest>
    {
        [JsonProperty("eventKey")]
        public readonly string EventKey;
        [JsonProperty("hookUrl")]
        public readonly string HookUrl;
        public RestHookRequest(string eventKey = default, string hookUrl = default)
        {
            EventKey = eventKey;
            HookUrl = hookUrl;
        }

        public RestHookRequest Copy(string eventKey = default, string hookUrl = default) => new RestHookRequest(eventKey: eventKey ?? EventKey, hookUrl: hookUrl ?? HookUrl);
    }

    public class EmailSentCreateList : Record<EmailSentCreateList>
    {
        [JsonProperty("emails")]
        public readonly Lst<EmailSentCreate> Emails;
        public EmailSentCreateList(Lst<EmailSentCreate> emails = default)
        {
            Emails = emails;
        }

        public EmailSentCreateList Copy(Lst<EmailSentCreate> emails = default) => new EmailSentCreateList(emails: emails == default ? Emails : emails);
    }

    public class StackTraceElement : Record<StackTraceElement>
    {
        [JsonProperty("className")]
        public readonly string ClassName;
        [JsonProperty("fileName")]
        public readonly string FileName;
        [JsonProperty("lineNumber")]
        public readonly int LineNumber;
        [JsonProperty("methodName")]
        public readonly string MethodName;
        [JsonProperty("nativeMethod")]
        public readonly bool NativeMethod;
        public StackTraceElement(string className = default, string fileName = default, int lineNumber = default, string methodName = default, bool nativeMethod = default)
        {
            ClassName = className;
            FileName = fileName;
            LineNumber = lineNumber;
            MethodName = methodName;
            NativeMethod = nativeMethod;
        }

        public StackTraceElement Copy(string className = default, string fileName = default, int? lineNumber = default, string methodName = default, bool nativeMethod = default) => new StackTraceElement(className: className ?? ClassName, fileName: fileName ?? FileName, lineNumber: lineNumber ?? LineNumber, methodName: methodName ?? MethodName, nativeMethod: nativeMethod == default ? NativeMethod : nativeMethod);
    }

    public class SequencePath : Record<SequencePath>
    {
        [JsonProperty("id")]
        public readonly long Id;
        [JsonProperty("items")]
        public readonly Lst<Item> Items;
        public SequencePath(long id = default, Lst<Item> items = default)
        {
            Id = id;
            Items = items;
        }

        public SequencePath Copy(long? id = default, Lst<Item> items = default) => new SequencePath(id: id ?? Id, items: items == default ? Items : items);
    }

    public class CompanyAddress : Record<CompanyAddress>
    {
        [JsonProperty("country_code")]
        public readonly string CountryCode;
        [JsonProperty("line1")]
        public readonly string Line1;
        [JsonProperty("line2")]
        public readonly string Line2;
        [JsonProperty("locality")]
        public readonly string Locality;
        [JsonProperty("region")]
        public readonly string Region;
        [JsonProperty("zip_code")]
        public readonly string ZipCode;
        [JsonProperty("zip_four")]
        public readonly string ZipFour;
        public CompanyAddress(string countryCode = default, string line1 = default, string line2 = default, string locality = default, string region = default, string zipCode = default, string zipFour = default)
        {
            CountryCode = countryCode;
            Line1 = line1;
            Line2 = line2;
            Locality = locality;
            Region = region;
            ZipCode = zipCode;
            ZipFour = zipFour;
        }

        public CompanyAddress Copy(string countryCode = default, string line1 = default, string line2 = default, string locality = default, string region = default, string zipCode = default, string zipFour = default) => new CompanyAddress(countryCode: countryCode ?? CountryCode, line1: line1 ?? Line1, line2: line2 ?? Line2, locality: locality ?? Locality, region: region ?? Region, zipCode: zipCode ?? ZipCode, zipFour: zipFour ?? ZipFour);
    }

    public class ContactTag : Record<ContactTag>
    {
        [JsonProperty("date_applied")]
        public readonly string DateApplied;
        [JsonProperty("tag")]
        public readonly SimpleTag Tag;
        public ContactTag(string dateApplied = default, SimpleTag tag = default)
        {
            DateApplied = dateApplied;
            Tag = tag;
        }

        public ContactTag Copy(string dateApplied = default, SimpleTag tag = default) => new ContactTag(dateApplied: dateApplied ?? DateApplied, tag: tag == default ? Tag : tag);
    }

    public class CustomFieldOption : Record<CustomFieldOption>
    {
        [JsonProperty("id")]
        public readonly string Id;
        [JsonProperty("label")]
        public readonly string Label;
        [JsonProperty("options")]
        public readonly Lst<CustomFieldOption> Options;
        public CustomFieldOption(string id = default, string label = default, Lst<CustomFieldOption> options = default)
        {
            Id = id;
            Label = label;
            Options = options;
        }

        public CustomFieldOption Copy(string id = default, string label = default, Lst<CustomFieldOption> options = default) => new CustomFieldOption(id: id ?? Id, label: label ?? Label, options: options == default ? Options : options);
    }

    public class Opportunity : Record<Opportunity>
    {
        [JsonProperty("contact")]
        public readonly OpportunityContact Contact;
        [JsonProperty("custom_fields")]
        public readonly Lst<CustomFieldValue> CustomFields;
        [JsonProperty("date_created")]
        public readonly string DateCreated;
        [JsonProperty("estimated_close_date")]
        public readonly string EstimatedCloseDate;
        [JsonProperty("id")]
        public readonly long Id;
        [JsonProperty("include_in_forecast")]
        public readonly int IncludeInForecast;
        [JsonProperty("last_updated")]
        public readonly string LastUpdated;
        [JsonProperty("next_action_date")]
        public readonly string NextActionDate;
        [JsonProperty("next_action_notes")]
        public readonly string NextActionNotes;
        [JsonProperty("opportunity_notes")]
        public readonly string OpportunityNotes;
        [JsonProperty("opportunity_title")]
        public readonly string OpportunityTitle;
        [JsonProperty("projected_revenue_high")]
        public readonly int ProjectedRevenueHigh;
        [JsonProperty("projected_revenue_low")]
        public readonly int ProjectedRevenueLow;
        [JsonProperty("stage")]
        public readonly SimpleOpportunityStage Stage;
        [JsonProperty("user")]
        public readonly SimpleUser User;
        public Opportunity(OpportunityContact contact = default, Lst<CustomFieldValue> customFields = default, string dateCreated = default, string estimatedCloseDate = default, long id = default, int includeInForecast = default, string lastUpdated = default, string nextActionDate = default, string nextActionNotes = default, string opportunityNotes = default, string opportunityTitle = default, int projectedRevenueHigh = default, int projectedRevenueLow = default, SimpleOpportunityStage stage = default, SimpleUser user = default)
        {
            Contact = contact;
            CustomFields = customFields;
            DateCreated = dateCreated;
            EstimatedCloseDate = estimatedCloseDate;
            Id = id;
            IncludeInForecast = includeInForecast;
            LastUpdated = lastUpdated;
            NextActionDate = nextActionDate;
            NextActionNotes = nextActionNotes;
            OpportunityNotes = opportunityNotes;
            OpportunityTitle = opportunityTitle;
            ProjectedRevenueHigh = projectedRevenueHigh;
            ProjectedRevenueLow = projectedRevenueLow;
            Stage = stage;
            User = user;
        }

        public Opportunity Copy(OpportunityContact contact = default, Lst<CustomFieldValue> customFields = default, string dateCreated = default, string estimatedCloseDate = default, long? id = default, int? includeInForecast = default, string lastUpdated = default, string nextActionDate = default, string nextActionNotes = default, string opportunityNotes = default, string opportunityTitle = default, int? projectedRevenueHigh = default, int? projectedRevenueLow = default, SimpleOpportunityStage stage = default, SimpleUser user = default) => new Opportunity(contact: contact == default ? Contact : contact, customFields: customFields == default ? CustomFields : customFields, dateCreated: dateCreated ?? DateCreated, estimatedCloseDate: estimatedCloseDate ?? EstimatedCloseDate, id: id ?? Id, includeInForecast: includeInForecast ?? IncludeInForecast, lastUpdated: lastUpdated ?? LastUpdated, nextActionDate: nextActionDate ?? NextActionDate, nextActionNotes: nextActionNotes ?? NextActionNotes, opportunityNotes: opportunityNotes ?? OpportunityNotes, opportunityTitle: opportunityTitle ?? OpportunityTitle, projectedRevenueHigh: projectedRevenueHigh ?? ProjectedRevenueHigh, projectedRevenueLow: projectedRevenueLow ?? ProjectedRevenueLow, stage: stage == default ? Stage : stage, user: user == default ? User : user);
    }

    public class CampaignLandingPageNodeDTO : Record<CampaignLandingPageNodeDTO>
    {
        [JsonProperty("formId")]
        public readonly string FormId;
        [JsonProperty("id")]
        public readonly string Id;
        [JsonProperty("landingPageId")]
        public readonly string LandingPageId;
        [JsonProperty("leadBucketIds")]
        public readonly Lst<string> LeadBucketIds;
        [JsonProperty("name")]
        public readonly string Name;
        [JsonProperty("properties")]
        public readonly object Properties;
        [JsonProperty("ready")]
        public readonly bool Ready;
        [JsonProperty("type")]
        public readonly Type Type;
        public CampaignLandingPageNodeDTO(string formId = default, string id = default, string landingPageId = default, Lst<string> leadBucketIds = default, string name = default, object properties = default, bool ready = default, Type type = default)
        {
            FormId = formId;
            Id = id;
            LandingPageId = landingPageId;
            LeadBucketIds = leadBucketIds;
            Name = name;
            Properties = properties;
            Ready = ready;
            Type = type;
        }

        public CampaignLandingPageNodeDTO Copy(string formId = default, string id = default, string landingPageId = default, Lst<string> leadBucketIds = default, string name = default, object properties = default, bool ready = default, Type type = default) => new CampaignLandingPageNodeDTO(formId: formId ?? FormId, id: id ?? Id, landingPageId: landingPageId ?? LandingPageId, leadBucketIds: leadBucketIds == default ? LeadBucketIds : leadBucketIds, name: name ?? Name, properties: properties ?? Properties, ready: ready == default ? Ready : ready, type: type == default ? Type : type);
    }

    public class RequestCompanyReference : Record<RequestCompanyReference>
    {
        [JsonProperty("id")]
        public readonly long Id;
        public RequestCompanyReference(long id = default)
        {
            Id = id;
        }

        public RequestCompanyReference Copy(long? id = default) => new RequestCompanyReference(id: id ?? Id);
    }

    public class AppointmentList : Record<AppointmentList>
    {
        [JsonProperty("appointments")]
        public readonly Lst<Appointment> Appointments;
        [JsonProperty("count")]
        public readonly int Count;
        [JsonProperty("next")]
        public readonly string Next;
        [JsonProperty("previous")]
        public readonly string Previous;
        [JsonProperty("sync_token")]
        public readonly string SyncToken;
        public AppointmentList(Lst<Appointment> appointments = default, int count = default, string next = default, string previous = default, string syncToken = default)
        {
            Appointments = appointments;
            Count = count;
            Next = next;
            Previous = previous;
            SyncToken = syncToken;
        }

        public AppointmentList Copy(Lst<Appointment> appointments = default, int? count = default, string next = default, string previous = default, string syncToken = default) => new AppointmentList(appointments: appointments == default ? Appointments : appointments, count: count ?? Count, next: next ?? Next, previous: previous ?? Previous, syncToken: syncToken ?? SyncToken);
    }

    public class HistoricalCounts : Record<HistoricalCounts>
    {
        [JsonProperty("24_hours")]
        public readonly int TwentyFourHours;
        [JsonProperty("30_days")]
        public readonly int ThirtyDays;
        public HistoricalCounts(int twentyFourHours = default, int thirtyDays = default)
        {
            TwentyFourHours = twentyFourHours;
            ThirtyDays = thirtyDays;
        }

        public HistoricalCounts Copy(int? twentyFourHours = default, int? thirtyDays = default) => new HistoricalCounts(twentyFourHours: twentyFourHours ?? TwentyFourHours, thirtyDays: thirtyDays ?? ThirtyDays);
    }

    public class TagCategory : Record<TagCategory>
    {
        [JsonProperty("description")]
        public readonly string Description;
        [JsonProperty("id")]
        public readonly long Id;
        [JsonProperty("name")]
        public readonly string Name;
        public TagCategory(string description = default, long id = default, string name = default)
        {
            Description = description;
            Id = id;
            Name = name;
        }

        public TagCategory Copy(string description = default, long? id = default, string name = default) => new TagCategory(description: description ?? Description, id: id ?? Id, name: name ?? Name);
    }

    public class FileUpload : Record<FileUpload>
    {
        [JsonProperty("file_name")]
        public readonly string FileName;
        [JsonProperty("file_data")]
        public readonly string FileData;
        [JsonProperty("contact_id")]
        public readonly long ContactId;
        [JsonProperty("is_public")]
        public readonly bool IsPublic;
        [JsonProperty("file_association")]
        public readonly FileAssociation FileAssociation;
        public FileUpload(string fileName = default, string fileData = default, long contactId = default, bool isPublic = default, FileAssociation fileAssociation = default)
        {
            FileName = fileName;
            FileData = fileData;
            ContactId = contactId;
            IsPublic = isPublic;
            FileAssociation = fileAssociation;
        }

        public FileUpload Copy(string fileName = default, string fileData = default, long? contactId = default, bool isPublic = default, FileAssociation fileAssociation = default) => new FileUpload(fileName: fileName ?? FileName, fileData: fileData ?? FileData, contactId: contactId ?? ContactId, isPublic: isPublic == default ? IsPublic : isPublic, fileAssociation: fileAssociation == default ? FileAssociation : fileAssociation);
    }

    public class ProductOption : Record<ProductOption>
    {
        [JsonProperty("allow_spaces")]
        public readonly bool AllowSpaces;
        [JsonProperty("can_contain_character")]
        public readonly bool CanContainCharacter;
        [JsonProperty("can_contain_number")]
        public readonly bool CanContainNumber;
        [JsonProperty("can_end_with_character")]
        public readonly bool CanEndWithCharacter;
        [JsonProperty("can_end_with_number")]
        public readonly bool CanEndWithNumber;
        [JsonProperty("can_start_with_character")]
        public readonly bool CanStartWithCharacter;
        [JsonProperty("can_start_with_number")]
        public readonly bool CanStartWithNumber;
        [JsonProperty("display_index")]
        public readonly int DisplayIndex;
        [JsonProperty("id")]
        public readonly long Id;
        [JsonProperty("label")]
        public readonly string Label;
        [JsonProperty("max_chars")]
        public readonly int MaxChars;
        [JsonProperty("min_chars")]
        public readonly int MinChars;
        [JsonProperty("name")]
        public readonly string Name;
        [JsonProperty("required")]
        public readonly bool Required;
        [JsonProperty("text_message")]
        public readonly string TextMessage;
        [JsonProperty("type")]
        public readonly Type Type;
        [JsonProperty("values")]
        public readonly Lst<ProductOptionValue> Values;
        public ProductOption(bool allowSpaces = default, bool canContainCharacter = default, bool canContainNumber = default, bool canEndWithCharacter = default, bool canEndWithNumber = default, bool canStartWithCharacter = default, bool canStartWithNumber = default, int displayIndex = default, long id = default, string label = default, int maxChars = default, int minChars = default, string name = default, bool required = default, string textMessage = default, Type type = default, Lst<ProductOptionValue> values = default)
        {
            AllowSpaces = allowSpaces;
            CanContainCharacter = canContainCharacter;
            CanContainNumber = canContainNumber;
            CanEndWithCharacter = canEndWithCharacter;
            CanEndWithNumber = canEndWithNumber;
            CanStartWithCharacter = canStartWithCharacter;
            CanStartWithNumber = canStartWithNumber;
            DisplayIndex = displayIndex;
            Id = id;
            Label = label;
            MaxChars = maxChars;
            MinChars = minChars;
            Name = name;
            Required = required;
            TextMessage = textMessage;
            Type = type;
            Values = values;
        }

        public ProductOption Copy(bool allowSpaces = default, bool canContainCharacter = default, bool canContainNumber = default, bool canEndWithCharacter = default, bool canEndWithNumber = default, bool canStartWithCharacter = default, bool canStartWithNumber = default, int? displayIndex = default, long? id = default, string label = default, int? maxChars = default, int? minChars = default, string name = default, bool required = default, string textMessage = default, Type type = default, Lst<ProductOptionValue> values = default) => new ProductOption(allowSpaces: allowSpaces == default ? AllowSpaces : allowSpaces, canContainCharacter: canContainCharacter == default ? CanContainCharacter : canContainCharacter, canContainNumber: canContainNumber == default ? CanContainNumber : canContainNumber, canEndWithCharacter: canEndWithCharacter == default ? CanEndWithCharacter : canEndWithCharacter, canEndWithNumber: canEndWithNumber == default ? CanEndWithNumber : canEndWithNumber, canStartWithCharacter: canStartWithCharacter == default ? CanStartWithCharacter : canStartWithCharacter, canStartWithNumber: canStartWithNumber == default ? CanStartWithNumber : canStartWithNumber, displayIndex: displayIndex ?? DisplayIndex, id: id ?? Id, label: label ?? Label, maxChars: maxChars ?? MaxChars, minChars: minChars ?? MinChars, name: name ?? Name, required: required == default ? Required : required, textMessage: textMessage ?? TextMessage, type: type == default ? Type : type, values: values == default ? Values : values);
    }

    public class FileInformation : Record<FileInformation>
    {
        [JsonProperty("file_data")]
        public readonly string FileData;
        [JsonProperty("file_descriptor")]
        public readonly FileDescriptor FileDescriptor;
        public FileInformation(string fileData = default, FileDescriptor fileDescriptor = default)
        {
            FileData = fileData;
            FileDescriptor = fileDescriptor;
        }

        public FileInformation Copy(string fileData = default, FileDescriptor fileDescriptor = default) => new FileInformation(fileData: fileData ?? FileData, fileDescriptor: fileDescriptor == default ? FileDescriptor : fileDescriptor);
    }

    public class CampaignNodeDTO : Record<CampaignNodeDTO>
    {
        [JsonProperty("id")]
        public readonly string Id;
        [JsonProperty("name")]
        public readonly string Name;
        [JsonProperty("properties")]
        public readonly object Properties;
        [JsonProperty("ready")]
        public readonly bool Ready;
        [JsonProperty("type")]
        public readonly Type Type;
        public CampaignNodeDTO(string id = default, string name = default, object properties = default, bool ready = default, Type type = default)
        {
            Id = id;
            Name = name;
            Properties = properties;
            Ready = ready;
            Type = type;
        }

        public CampaignNodeDTO Copy(string id = default, string name = default, object properties = default, bool ready = default, Type type = default) => new CampaignNodeDTO(id: id ?? Id, name: name ?? Name, properties: properties ?? Properties, ready: ready == default ? Ready : ready, type: type == default ? Type : type);
    }

    public class CompanyFaxNumber : Record<CompanyFaxNumber>
    {
        [JsonProperty("number")]
        public readonly string Number;
        [JsonProperty("type")]
        public readonly string Type;
        public CompanyFaxNumber(string number = default, string type = default)
        {
            Number = number;
            Type = type;
        }

        public CompanyFaxNumber Copy(string number = default, string type = default) => new CompanyFaxNumber(number: number ?? Number, type: type ?? Type);
    }

    public class AffiliateCommissionList : Record<AffiliateCommissionList>
    {
        [JsonProperty("commissions")]
        public readonly Lst<AffiliateCommission> Commissions;
        [JsonProperty("count")]
        public readonly int Count;
        [JsonProperty("next")]
        public readonly string Next;
        [JsonProperty("previous")]
        public readonly string Previous;
        public AffiliateCommissionList(Lst<AffiliateCommission> commissions = default, int count = default, string next = default, string previous = default)
        {
            Commissions = commissions;
            Count = count;
            Next = next;
            Previous = previous;
        }

        public AffiliateCommissionList Copy(Lst<AffiliateCommission> commissions = default, int? count = default, string next = default, string previous = default) => new AffiliateCommissionList(commissions: commissions == default ? Commissions : commissions, count: count ?? Count, next: next ?? Next, previous: previous ?? Previous);
    }

    public class SimpleProduct : Record<SimpleProduct>
    {
        [JsonProperty("description")]
        public readonly string Description;
        [JsonProperty("id")]
        public readonly long Id;
        [JsonProperty("name")]
        public readonly string Name;
        [JsonProperty("shippable")]
        public readonly bool Shippable;
        [JsonProperty("sku")]
        public readonly string Sku;
        [JsonProperty("taxable")]
        public readonly bool Taxable;
        public SimpleProduct(string description = default, long id = default, string name = default, bool shippable = default, string sku = default, bool taxable = default)
        {
            Description = description;
            Id = id;
            Name = name;
            Shippable = shippable;
            Sku = sku;
            Taxable = taxable;
        }

        public SimpleProduct Copy(string description = default, long? id = default, string name = default, bool shippable = default, string sku = default, bool taxable = default) => new SimpleProduct(description: description ?? Description, id: id ?? Id, name: name ?? Name, shippable: shippable == default ? Shippable : shippable, sku: sku ?? Sku, taxable: taxable == default ? Taxable : taxable);
    }

    public class Error : Record<Error>
    {
        [JsonProperty("cause")]
        public readonly Throwable Cause;
        [JsonProperty("localizedMessage")]
        public readonly string LocalizedMessage;
        [JsonProperty("message")]
        public readonly string Message;
        [JsonProperty("stackTrace")]
        public readonly Lst<StackTraceElement> StackTrace;
        [JsonProperty("suppressed")]
        public readonly Lst<Throwable> Suppressed;
        public Error(Throwable cause = default, string localizedMessage = default, string message = default, Lst<StackTraceElement> stackTrace = default, Lst<Throwable> suppressed = default)
        {
            Cause = cause;
            LocalizedMessage = localizedMessage;
            Message = message;
            StackTrace = stackTrace;
            Suppressed = suppressed;
        }

        public Error Copy(Throwable cause = default, string localizedMessage = default, string message = default, Lst<StackTraceElement> stackTrace = default, Lst<Throwable> suppressed = default) => new Error(cause: cause == default ? Cause : cause, localizedMessage: localizedMessage ?? LocalizedMessage, message: message ?? Message, stackTrace: stackTrace == default ? StackTrace : stackTrace, suppressed: suppressed == default ? Suppressed : suppressed);
    }

    public class ProductStatus : Record<ProductStatus>
    {
        [JsonProperty("product")]
        public readonly Product Product;
        [JsonProperty("status")]
        public readonly Status Status;
        public ProductStatus(Product product = default, Status status = default)
        {
            Product = product;
            Status = status;
        }

        public ProductStatus Copy(Product product = default, Status status = default) => new ProductStatus(product: product == default ? Product : product, status: status == default ? Status : status);
    }

    public class RequestContact : Record<RequestContact>
    {
        [JsonProperty("addresses")]
        public readonly Lst<Address> Addresses;
        [JsonProperty("anniversary")]
        public readonly string Anniversary;
        [JsonProperty("birthday")]
        public readonly string Birthday;
        [JsonProperty("company")]
        public readonly RequestCompanyReference Company;
        [JsonProperty("contact_type")]
        public readonly string ContactType;
        [JsonProperty("custom_fields")]
        public readonly Lst<CustomFieldValue> CustomFields;
        [JsonProperty("email_addresses")]
        public readonly Lst<EmailAddress> EmailAddresses;
        [JsonProperty("family_name")]
        public readonly string FamilyName;
        [JsonProperty("fax_numbers")]
        public readonly Lst<FaxNumber> FaxNumbers;
        [JsonProperty("given_name")]
        public readonly string GivenName;
        [JsonProperty("job_title")]
        public readonly string JobTitle;
        [JsonProperty("lead_source_id")]
        public readonly long LeadSourceId;
        [JsonProperty("middle_name")]
        public readonly string MiddleName;
        [JsonProperty("notes")]
        public readonly string Notes;
        [JsonProperty("opt_in_reason")]
        public readonly string OptInReason;
        [JsonProperty("owner_id")]
        public readonly long OwnerId;
        [JsonProperty("phone_numbers")]
        public readonly Lst<PhoneNumber> PhoneNumbers;
        [JsonProperty("preferred_locale")]
        public readonly string PreferredLocale;
        [JsonProperty("preferred_name")]
        public readonly string PreferredName;
        [JsonProperty("prefix")]
        public readonly string Prefix;
        [JsonProperty("social_accounts")]
        public readonly Lst<SocialAccount> SocialAccounts;
        [JsonProperty("source_type")]
        public readonly SourceType SourceType;
        [JsonProperty("spouse_name")]
        public readonly string SpouseName;
        [JsonProperty("suffix")]
        public readonly string Suffix;
        [JsonProperty("time_zone")]
        public readonly string TimeZone;
        [JsonProperty("website")]
        public readonly string Website;
        public RequestContact(Lst<Address> addresses = default, string anniversary = default, string birthday = default, RequestCompanyReference company = default, string contactType = default, Lst<CustomFieldValue> customFields = default, Lst<EmailAddress> emailAddresses = default, string familyName = default, Lst<FaxNumber> faxNumbers = default, string givenName = default, string jobTitle = default, long leadSourceId = default, string middleName = default, string notes = default, string optInReason = default, long ownerId = default, Lst<PhoneNumber> phoneNumbers = default, string preferredLocale = default, string preferredName = default, string prefix = default, Lst<SocialAccount> socialAccounts = default, SourceType sourceType = default, string spouseName = default, string suffix = default, string timeZone = default, string website = default)
        {
            Addresses = addresses;
            Anniversary = anniversary;
            Birthday = birthday;
            Company = company;
            ContactType = contactType;
            CustomFields = customFields;
            EmailAddresses = emailAddresses;
            FamilyName = familyName;
            FaxNumbers = faxNumbers;
            GivenName = givenName;
            JobTitle = jobTitle;
            LeadSourceId = leadSourceId;
            MiddleName = middleName;
            Notes = notes;
            OptInReason = optInReason;
            OwnerId = ownerId;
            PhoneNumbers = phoneNumbers;
            PreferredLocale = preferredLocale;
            PreferredName = preferredName;
            Prefix = prefix;
            SocialAccounts = socialAccounts;
            SourceType = sourceType;
            SpouseName = spouseName;
            Suffix = suffix;
            TimeZone = timeZone;
            Website = website;
        }

        public RequestContact Copy(Lst<Address> addresses = default, string anniversary = default, string birthday = default, RequestCompanyReference company = default, string contactType = default, Lst<CustomFieldValue> customFields = default, Lst<EmailAddress> emailAddresses = default, string familyName = default, Lst<FaxNumber> faxNumbers = default, string givenName = default, string jobTitle = default, long? leadSourceId = default, string middleName = default, string notes = default, string optInReason = default, long? ownerId = default, Lst<PhoneNumber> phoneNumbers = default, string preferredLocale = default, string preferredName = default, string prefix = default, Lst<SocialAccount> socialAccounts = default, SourceType sourceType = default, string spouseName = default, string suffix = default, string timeZone = default, string website = default) => new RequestContact(addresses: addresses == default ? Addresses : addresses, anniversary: anniversary ?? Anniversary, birthday: birthday ?? Birthday, company: company == default ? Company : company, contactType: contactType ?? ContactType, customFields: customFields == default ? CustomFields : customFields, emailAddresses: emailAddresses == default ? EmailAddresses : emailAddresses, familyName: familyName ?? FamilyName, faxNumbers: faxNumbers == default ? FaxNumbers : faxNumbers, givenName: givenName ?? GivenName, jobTitle: jobTitle ?? JobTitle, leadSourceId: leadSourceId ?? LeadSourceId, middleName: middleName ?? MiddleName, notes: notes ?? Notes, optInReason: optInReason ?? OptInReason, ownerId: ownerId ?? OwnerId, phoneNumbers: phoneNumbers == default ? PhoneNumbers : phoneNumbers, preferredLocale: preferredLocale ?? PreferredLocale, preferredName: preferredName ?? PreferredName, prefix: prefix ?? Prefix, socialAccounts: socialAccounts == default ? SocialAccounts : socialAccounts, sourceType: sourceType == default ? SourceType : sourceType, spouseName: spouseName ?? SpouseName, suffix: suffix ?? Suffix, timeZone: timeZone ?? TimeZone, website: website ?? Website);
    }

    public class SocialAccount : Record<SocialAccount>
    {
        [JsonProperty("name")]
        public readonly string Name;
        [JsonProperty("type")]
        public readonly Type Type;
        public SocialAccount(string name = default, Type type = default)
        {
            Name = name;
            Type = type;
        }

        public SocialAccount Copy(string name = default, Type type = default) => new SocialAccount(name: name ?? Name, type: type == default ? Type : type);
    }

    public class ContactList : Record<ContactList>
    {
        [JsonProperty("contacts")]
        public readonly Lst<FullContact> Contacts;
        [JsonProperty("count")]
        public readonly int Count;
        [JsonProperty("next")]
        public readonly string Next;
        [JsonProperty("previous")]
        public readonly string Previous;
        public ContactList(Lst<FullContact> contacts = default, int count = default, string next = default, string previous = default)
        {
            Contacts = contacts;
            Count = count;
            Next = next;
            Previous = previous;
        }

        public ContactList Copy(Lst<FullContact> contacts = default, int? count = default, string next = default, string previous = default) => new ContactList(contacts: contacts == default ? Contacts : contacts, count: count ?? Count, next: next ?? Next, previous: previous ?? Previous);
    }

    public class CreateCompany : Record<CreateCompany>
    {
        [JsonProperty("address")]
        public readonly CompanyAddress Address;
        [JsonProperty("company_name")]
        public readonly string CompanyName;
        [JsonProperty("custom_fields")]
        public readonly Lst<CustomFieldValue> CustomFields;
        [JsonProperty("email_address")]
        public readonly string EmailAddress;
        [JsonProperty("fax_number")]
        public readonly CompanyFaxNumber FaxNumber;
        [JsonProperty("notes")]
        public readonly string Notes;
        [JsonProperty("opt_in_reason")]
        public readonly string OptInReason;
        [JsonProperty("phone_number")]
        public readonly CompanyPhoneNumber PhoneNumber;
        [JsonProperty("website")]
        public readonly string Website;
        public CreateCompany(CompanyAddress address = default, string companyName = default, Lst<CustomFieldValue> customFields = default, string emailAddress = default, CompanyFaxNumber faxNumber = default, string notes = default, string optInReason = default, CompanyPhoneNumber phoneNumber = default, string website = default)
        {
            Address = address;
            CompanyName = companyName;
            CustomFields = customFields;
            EmailAddress = emailAddress;
            FaxNumber = faxNumber;
            Notes = notes;
            OptInReason = optInReason;
            PhoneNumber = phoneNumber;
            Website = website;
        }

        public CreateCompany Copy(CompanyAddress address = default, string companyName = default, Lst<CustomFieldValue> customFields = default, string emailAddress = default, CompanyFaxNumber faxNumber = default, string notes = default, string optInReason = default, CompanyPhoneNumber phoneNumber = default, string website = default) => new CreateCompany(address: address == default ? Address : address, companyName: companyName ?? CompanyName, customFields: customFields == default ? CustomFields : customFields, emailAddress: emailAddress ?? EmailAddress, faxNumber: faxNumber == default ? FaxNumber : faxNumber, notes: notes ?? Notes, optInReason: optInReason ?? OptInReason, phoneNumber: phoneNumber == default ? PhoneNumber : phoneNumber, website: website ?? Website);
    }

    public class EmailSentQueryResultList : Record<EmailSentQueryResultList>
    {
        [JsonProperty("count")]
        public readonly int Count;
        [JsonProperty("emails")]
        public readonly Lst<EmailSentQueryResult> Emails;
        [JsonProperty("next")]
        public readonly string Next;
        [JsonProperty("previous")]
        public readonly string Previous;
        public EmailSentQueryResultList(int count = default, Lst<EmailSentQueryResult> emails = default, string next = default, string previous = default)
        {
            Count = count;
            Emails = emails;
            Next = next;
            Previous = previous;
        }

        public EmailSentQueryResultList Copy(int? count = default, Lst<EmailSentQueryResult> emails = default, string next = default, string previous = default) => new EmailSentQueryResultList(count: count ?? Count, emails: emails == default ? Emails : emails, next: next ?? Next, previous: previous ?? Previous);
    }

    public class SetOfIds : Record<SetOfIds>
    {
        [JsonProperty("ids")]
        public readonly Lst<long> Ids;
        public SetOfIds(Lst<long> ids = default)
        {
            Ids = ids;
        }

        public SetOfIds Copy(Lst<long> ids = default) => new SetOfIds(ids: ids == default ? Ids : ids);
    }

    public class CreditCard : Record<CreditCard>
    {
        [JsonProperty("address")]
        public readonly Address Address;
        [JsonProperty("card_number")]
        public readonly string CardNumber;
        [JsonProperty("card_type")]
        public readonly string CardType;
        [JsonProperty("email_address")]
        public readonly string EmailAddress;
        [JsonProperty("expiration_month")]
        public readonly string ExpirationMonth;
        [JsonProperty("expiration_year")]
        public readonly string ExpirationYear;
        [JsonProperty("maestro_issue_number")]
        public readonly string MaestroIssueNumber;
        [JsonProperty("maestro_start_date_month")]
        public readonly string MaestroStartDateMonth;
        [JsonProperty("maestro_start_date_year")]
        public readonly string MaestroStartDateYear;
        [JsonProperty("name_on_card")]
        public readonly string NameOnCard;
        [JsonProperty("verification_code")]
        public readonly string VerificationCode;
        public CreditCard(Address address = default, string cardNumber = default, string cardType = default, string emailAddress = default, string expirationMonth = default, string expirationYear = default, string maestroIssueNumber = default, string maestroStartDateMonth = default, string maestroStartDateYear = default, string nameOnCard = default, string verificationCode = default)
        {
            Address = address;
            CardNumber = cardNumber;
            CardType = cardType;
            EmailAddress = emailAddress;
            ExpirationMonth = expirationMonth;
            ExpirationYear = expirationYear;
            MaestroIssueNumber = maestroIssueNumber;
            MaestroStartDateMonth = maestroStartDateMonth;
            MaestroStartDateYear = maestroStartDateYear;
            NameOnCard = nameOnCard;
            VerificationCode = verificationCode;
        }

        public CreditCard Copy(Address address = default, string cardNumber = default, string cardType = default, string emailAddress = default, string expirationMonth = default, string expirationYear = default, string maestroIssueNumber = default, string maestroStartDateMonth = default, string maestroStartDateYear = default, string nameOnCard = default, string verificationCode = default) => new CreditCard(address: address == default ? Address : address, cardNumber: cardNumber ?? CardNumber, cardType: cardType ?? CardType, emailAddress: emailAddress ?? EmailAddress, expirationMonth: expirationMonth ?? ExpirationMonth, expirationYear: expirationYear ?? ExpirationYear, maestroIssueNumber: maestroIssueNumber ?? MaestroIssueNumber, maestroStartDateMonth: maestroStartDateMonth ?? MaestroStartDateMonth, maestroStartDateYear: maestroStartDateYear ?? MaestroStartDateYear, nameOnCard: nameOnCard ?? NameOnCard, verificationCode: verificationCode ?? VerificationCode);
    }

    public class EmailSentCreate : Record<EmailSentCreate>
    {
        [JsonProperty("contact_id")]
        public readonly long ContactId;
        [JsonProperty("headers")]
        public readonly string Headers;
        [JsonProperty("html_content")]
        public readonly string HtmlContent;
        [JsonProperty("id")]
        public readonly long Id;
        [JsonProperty("opened_date")]
        public readonly string OpenedDate;
        [JsonProperty("plain_content")]
        public readonly string PlainContent;
        [JsonProperty("received_date")]
        public readonly string ReceivedDate;
        [JsonProperty("sent_date")]
        public readonly string SentDate;
        [JsonProperty("sent_from_address")]
        public readonly string SentFromAddress;
        [JsonProperty("sent_from_reply_address")]
        public readonly string SentFromReplyAddress;
        [JsonProperty("sent_to_address")]
        public readonly string SentToAddress;
        [JsonProperty("sent_to_bcc_addresses")]
        public readonly string SentToBccAddresses;
        [JsonProperty("sent_to_cc_addresses")]
        public readonly string SentToCcAddresses;
        [JsonProperty("subject")]
        public readonly string Subject;
        public EmailSentCreate(long contactId = default, string headers = default, string htmlContent = default, long id = default, string openedDate = default, string plainContent = default, string receivedDate = default, string sentDate = default, string sentFromAddress = default, string sentFromReplyAddress = default, string sentToAddress = default, string sentToBccAddresses = default, string sentToCcAddresses = default, string subject = default)
        {
            ContactId = contactId;
            Headers = headers;
            HtmlContent = htmlContent;
            Id = id;
            OpenedDate = openedDate;
            PlainContent = plainContent;
            ReceivedDate = receivedDate;
            SentDate = sentDate;
            SentFromAddress = sentFromAddress;
            SentFromReplyAddress = sentFromReplyAddress;
            SentToAddress = sentToAddress;
            SentToBccAddresses = sentToBccAddresses;
            SentToCcAddresses = sentToCcAddresses;
            Subject = subject;
        }

        public EmailSentCreate Copy(long? contactId = default, string headers = default, string htmlContent = default, long? id = default, string openedDate = default, string plainContent = default, string receivedDate = default, string sentDate = default, string sentFromAddress = default, string sentFromReplyAddress = default, string sentToAddress = default, string sentToBccAddresses = default, string sentToCcAddresses = default, string subject = default) => new EmailSentCreate(contactId: contactId ?? ContactId, headers: headers ?? Headers, htmlContent: htmlContent ?? HtmlContent, id: id ?? Id, openedDate: openedDate ?? OpenedDate, plainContent: plainContent ?? PlainContent, receivedDate: receivedDate ?? ReceivedDate, sentDate: sentDate ?? SentDate, sentFromAddress: sentFromAddress ?? SentFromAddress, sentFromReplyAddress: sentFromReplyAddress ?? SentFromReplyAddress, sentToAddress: sentToAddress ?? SentToAddress, sentToBccAddresses: sentToBccAddresses ?? SentToBccAddresses, sentToCcAddresses: sentToCcAddresses ?? SentToCcAddresses, subject: subject ?? Subject);
    }

    public class FileDescriptor : Record<FileDescriptor>
    {
        [JsonProperty("category")]
        public readonly Category Category;
        [JsonProperty("contact_id")]
        public readonly long ContactId;
        [JsonProperty("created_by")]
        public readonly long CreatedBy;
        [JsonProperty("date_created")]
        public readonly string DateCreated;
        [JsonProperty("download_url")]
        public readonly string DownloadUrl;
        [JsonProperty("file_box_type")]
        public readonly FileBoxType FileBoxType;
        [JsonProperty("file_name")]
        public readonly string FileName;
        [JsonProperty("file_size")]
        public readonly long FileSize;
        [JsonProperty("last_updated")]
        public readonly string LastUpdated;
        [JsonProperty("public")]
        public readonly bool Public;
        [JsonProperty("remote_file_key")]
        public readonly string RemoteFileKey;
        public FileDescriptor(Category category = default, long contactId = default, long createdBy = default, string dateCreated = default, string downloadUrl = default, FileBoxType fileBoxType = default, string fileName = default, long fileSize = default, string lastUpdated = default, bool _public = default, string remoteFileKey = default)
        {
            Category = category;
            ContactId = contactId;
            CreatedBy = createdBy;
            DateCreated = dateCreated;
            DownloadUrl = downloadUrl;
            FileBoxType = fileBoxType;
            FileName = fileName;
            FileSize = fileSize;
            LastUpdated = lastUpdated;
            Public = _public;
            RemoteFileKey = remoteFileKey;
        }

        public FileDescriptor Copy(Category category = default, long? contactId = default, long? createdBy = default, string dateCreated = default, string downloadUrl = default, FileBoxType fileBoxType = default, string fileName = default, long? fileSize = default, string lastUpdated = default, bool _public = default, string remoteFileKey = default) => new FileDescriptor(category: category == default ? Category : category, contactId: contactId ?? ContactId, createdBy: createdBy ?? CreatedBy, dateCreated: dateCreated ?? DateCreated, downloadUrl: downloadUrl ?? DownloadUrl, fileBoxType: fileBoxType == default ? FileBoxType : fileBoxType, fileName: fileName ?? FileName, fileSize: fileSize ?? FileSize, lastUpdated: lastUpdated ?? LastUpdated, _public: _public == default ? Public : _public, remoteFileKey: remoteFileKey ?? RemoteFileKey);
    }

    public class ProductList : Record<ProductList>
    {
        [JsonProperty("count")]
        public readonly int Count;
        [JsonProperty("next")]
        public readonly string Next;
        [JsonProperty("previous")]
        public readonly string Previous;
        [JsonProperty("products")]
        public readonly Lst<Product> Products;
        [JsonProperty("sync_token")]
        public readonly string SyncToken;
        public ProductList(int count = default, string next = default, string previous = default, Lst<Product> products = default, string syncToken = default)
        {
            Count = count;
            Next = next;
            Previous = previous;
            Products = products;
            SyncToken = syncToken;
        }

        public ProductList Copy(int? count = default, string next = default, string previous = default, Lst<Product> products = default, string syncToken = default) => new ProductList(count: count ?? Count, next: next ?? Next, previous: previous ?? Previous, products: products == default ? Products : products, syncToken: syncToken ?? SyncToken);
    }

    public class Relationship : Record<Relationship>
    {
        [JsonProperty("id")]
        public readonly long Id;
        [JsonProperty("linked_contact_id")]
        public readonly long LinkedContactId;
        [JsonProperty("relationship_type_id")]
        public readonly long RelationshipTypeId;
        public Relationship(long id = default, long linkedContactId = default, long relationshipTypeId = default)
        {
            Id = id;
            LinkedContactId = linkedContactId;
            RelationshipTypeId = relationshipTypeId;
        }

        public Relationship Copy(long? id = default, long? linkedContactId = default, long? relationshipTypeId = default) => new Relationship(id: id ?? Id, linkedContactId: linkedContactId ?? LinkedContactId, relationshipTypeId: relationshipTypeId ?? RelationshipTypeId);
    }

    public class OrderItem : Record<OrderItem>
    {
        [JsonProperty("cost")]
        public readonly int Cost;
        [JsonProperty("description")]
        public readonly string Description;
        [JsonProperty("discount")]
        public readonly int Discount;
        [JsonProperty("id")]
        public readonly long Id;
        [JsonProperty("name")]
        public readonly string Name;
        [JsonProperty("notes")]
        public readonly string Notes;
        [JsonProperty("price")]
        public readonly int Price;
        [JsonProperty("product")]
        public readonly SimpleProduct Product;
        [JsonProperty("quantity")]
        public readonly int Quantity;
        [JsonProperty("type")]
        public readonly string Type;
        public OrderItem(int cost = default, string description = default, int discount = default, long id = default, string name = default, string notes = default, int price = default, SimpleProduct product = default, int quantity = default, string type = default)
        {
            Cost = cost;
            Description = description;
            Discount = discount;
            Id = id;
            Name = name;
            Notes = notes;
            Price = price;
            Product = product;
            Quantity = quantity;
            Type = type;
        }

        public OrderItem Copy(int? cost = default, string description = default, int? discount = default, long? id = default, string name = default, string notes = default, int? price = default, SimpleProduct product = default, int? quantity = default, string type = default) => new OrderItem(cost: cost ?? Cost, description: description ?? Description, discount: discount ?? Discount, id: id ?? Id, name: name ?? Name, notes: notes ?? Notes, price: price ?? Price, product: product == default ? Product : product, quantity: quantity ?? Quantity, type: type ?? Type);
    }

    public class TagId : Record<TagId>
    {
        [JsonProperty("tagIds")]
        public readonly Lst<long> TagIds;
        public TagId(Lst<long> tagIds = default)
        {
            TagIds = tagIds;
        }

        public TagId Copy(Lst<long> tagIds = default) => new TagId(tagIds: tagIds == default ? TagIds : tagIds);
    }

    public class PhoneNumber : Record<PhoneNumber>
    {
        [JsonProperty("extension")]
        public readonly string Extension;
        [JsonProperty("field")]
        public readonly Field Field;
        [JsonProperty("number")]
        public readonly string Number;
        [JsonProperty("type")]
        public readonly string Type;
        public PhoneNumber(string extension = default, Field field = default, string number = default, string type = default)
        {
            Extension = extension;
            Field = field;
            Number = number;
            Type = type;
        }

        public PhoneNumber Copy(string extension = default, Field field = default, string number = default, string type = default) => new PhoneNumber(extension: extension ?? Extension, field: field == default ? Field : field, number: number ?? Number, type: type ?? Type);
    }

    public class StageDetails : Record<StageDetails>
    {
        [JsonProperty("check_list_items")]
        public readonly Lst<CheckListItemDetails> CheckListItems;
        [JsonProperty("probability")]
        public readonly int Probability;
        [JsonProperty("stage_order")]
        public readonly int StageOrder;
        [JsonProperty("target_num_days")]
        public readonly int TargetNumDays;
        public StageDetails(Lst<CheckListItemDetails> checkListItems = default, int probability = default, int stageOrder = default, int targetNumDays = default)
        {
            CheckListItems = checkListItems;
            Probability = probability;
            StageOrder = stageOrder;
            TargetNumDays = targetNumDays;
        }

        public StageDetails Copy(Lst<CheckListItemDetails> checkListItems = default, int? probability = default, int? stageOrder = default, int? targetNumDays = default) => new StageDetails(checkListItems: checkListItems == default ? CheckListItems : checkListItems, probability: probability ?? Probability, stageOrder: stageOrder ?? StageOrder, targetNumDays: targetNumDays ?? TargetNumDays);
    }

    public class OrderList : Record<OrderList>
    {
        [JsonProperty("count")]
        public readonly int Count;
        [JsonProperty("next")]
        public readonly string Next;
        [JsonProperty("orders")]
        public readonly Lst<Order> Orders;
        [JsonProperty("previous")]
        public readonly string Previous;
        public OrderList(int count = default, string next = default, Lst<Order> orders = default, string previous = default)
        {
            Count = count;
            Next = next;
            Orders = orders;
            Previous = previous;
        }

        public OrderList Copy(int? count = default, string next = default, Lst<Order> orders = default, string previous = default) => new OrderList(count: count ?? Count, next: next ?? Next, orders: orders == default ? Orders : orders, previous: previous ?? Previous);
    }

    public class Tag : Record<Tag>
    {
        [JsonProperty("category")]
        public readonly TagCategory Category;
        [JsonProperty("description")]
        public readonly string Description;
        [JsonProperty("id")]
        public readonly long Id;
        [JsonProperty("name")]
        public readonly string Name;
        public Tag(TagCategory category = default, string description = default, long id = default, string name = default)
        {
            Category = category;
            Description = description;
            Id = id;
            Name = name;
        }

        public Tag Copy(TagCategory category = default, string description = default, long? id = default, string name = default) => new Tag(category: category == default ? Category : category, description: description ?? Description, id: id ?? Id, name: name ?? Name);
    }

    public class CampaignList : Record<CampaignList>
    {
        [JsonProperty("campaigns")]
        public readonly Lst<Campaign> Campaigns;
        [JsonProperty("count")]
        public readonly int Count;
        [JsonProperty("next")]
        public readonly string Next;
        [JsonProperty("previous")]
        public readonly string Previous;
        public CampaignList(Lst<Campaign> campaigns = default, int count = default, string next = default, string previous = default)
        {
            Campaigns = campaigns;
            Count = count;
            Next = next;
            Previous = previous;
        }

        public CampaignList Copy(Lst<Campaign> campaigns = default, int? count = default, string next = default, string previous = default) => new CampaignList(campaigns: campaigns == default ? Campaigns : campaigns, count: count ?? Count, next: next ?? Next, previous: previous ?? Previous);
    }

    public class EmailSentQueryResult : Record<EmailSentQueryResult>
    {
        [JsonProperty("contact_id")]
        public readonly long ContactId;
        [JsonProperty("headers")]
        public readonly string Headers;
        [JsonProperty("id")]
        public readonly long Id;
        [JsonProperty("opened_date")]
        public readonly string OpenedDate;
        [JsonProperty("received_date")]
        public readonly string ReceivedDate;
        [JsonProperty("sent_date")]
        public readonly string SentDate;
        [JsonProperty("sent_from_address")]
        public readonly string SentFromAddress;
        [JsonProperty("sent_from_reply_address")]
        public readonly string SentFromReplyAddress;
        [JsonProperty("sent_to_address")]
        public readonly string SentToAddress;
        [JsonProperty("sent_to_bcc_addresses")]
        public readonly string SentToBccAddresses;
        [JsonProperty("sent_to_cc_addresses")]
        public readonly string SentToCcAddresses;
        [JsonProperty("subject")]
        public readonly string Subject;
        public EmailSentQueryResult(long contactId = default, string headers = default, long id = default, string openedDate = default, string receivedDate = default, string sentDate = default, string sentFromAddress = default, string sentFromReplyAddress = default, string sentToAddress = default, string sentToBccAddresses = default, string sentToCcAddresses = default, string subject = default)
        {
            ContactId = contactId;
            Headers = headers;
            Id = id;
            OpenedDate = openedDate;
            ReceivedDate = receivedDate;
            SentDate = sentDate;
            SentFromAddress = sentFromAddress;
            SentFromReplyAddress = sentFromReplyAddress;
            SentToAddress = sentToAddress;
            SentToBccAddresses = sentToBccAddresses;
            SentToCcAddresses = sentToCcAddresses;
            Subject = subject;
        }

        public EmailSentQueryResult Copy(long? contactId = default, string headers = default, long? id = default, string openedDate = default, string receivedDate = default, string sentDate = default, string sentFromAddress = default, string sentFromReplyAddress = default, string sentToAddress = default, string sentToBccAddresses = default, string sentToCcAddresses = default, string subject = default) => new EmailSentQueryResult(contactId: contactId ?? ContactId, headers: headers ?? Headers, id: id ?? Id, openedDate: openedDate ?? OpenedDate, receivedDate: receivedDate ?? ReceivedDate, sentDate: sentDate ?? SentDate, sentFromAddress: sentFromAddress ?? SentFromAddress, sentFromReplyAddress: sentFromReplyAddress ?? SentFromReplyAddress, sentToAddress: sentToAddress ?? SentToAddress, sentToBccAddresses: sentToBccAddresses ?? SentToBccAddresses, sentToCcAddresses: sentToCcAddresses ?? SentToCcAddresses, subject: subject ?? Subject);
    }
}