using System;
using System.Threading.Tasks;
using Infusio.Model;
using Infusio.Ops;
using LanguageExt;

namespace Infusio.Http
{
    using static Prelude;

    public static class HttpSupport
    {
        public static Task<Either<Error, T>> interpret<T>(InfusioOp<T> op, InfusioClient client) =>
            RunAsync(op, client);

        public static Task<Either<Error, T>> RunWith<T>(this InfusioOp<T> op, InfusioClient client) =>
            RunAsync(op, client);

        static Task<Either<Error, T>> RunAsync<T>(InfusioOp<T> op, InfusioClient client) =>
            op is InfusioOp<T>.Return r ? Right<Error, T>(r.Value).AsTask() :
{% for op in Operations -%}
            op is InfusioOp<T>.{{ op.Name }}{% assign op_name = forloop.index %} _{{ op_name }} ? Exe(() => client.{{ op.Name }}({% for p in op.Parameters -%}_{{ op_name }}.{{ p.Name | capitalize }}{% if forloop.last == false %}, {% endif %}{% endfor %}), _{{ op_name }}.Next, client) :
{% endfor -%}
            throw new NotSupportedException();

        static Task<Either<Error, B>> Exe<T, B>(Func<Task<Either<Error, T>>> fn, Func<T, InfusioOp<B>> nextOp, InfusioClient client) =>
            from profile in fn()
            from next in RunAsync(nextOp(profile), client)
            select next;
    }
}