//----------------------
// <auto-generated>
// </auto-generated>
//----------------------
using System;
using LanguageExt;
using Infusio.Model;

namespace Infusio.Ops
{
    public abstract class InfusioOp<A>
    {
        internal class Return : InfusioOp<A>
        {
            public readonly A Value;
            public Return(A value) => Value = value;
        }

        {% for op in Operations %}
        internal class {{ op.Name }} : InfusioOp<A>
        {
            public readonly Func<{{ op.ResponseType | normalize }}, InfusioOp<A>> Next;
            {% for p in op.Parameters -%}
            public readonly {{ p.OptionalTypeName }} {{ p.Name | capitalize }};
            {% endfor -%}

            public {{ op.Name }}(Func<{{ op.ResponseType | normalize }}, InfusioOp<A>> next{% if op.HasParameters %}, {% endif %}{% for p in op.Parameters %}{{ p.OptionalTypeName }} {{ p.Name }}{% if forloop.last == false %}, {% endif %}{% endfor %})
            {
                Next = next;
              {% for p in op.Parameters -%}
              {{ p.Name | capitalize }} = {{ p.Name }};
              {% endfor -%}
            }
        }
        {% endfor -%}
    }

    public static class InfusioOpExtensions
    {
        public static InfusioOp<B> Map<A, B>(this InfusioOp<A> op, Func<A, B> fn) =>
            op.Bind(a => InfusioDsl.Return(fn(a)));

        public static InfusioOp<B> Select<A, B>(this InfusioOp<A> op, Func<A, B> fn) =>
            op.Bind(a => InfusioDsl.Return(fn(a)));

        public static InfusioOp<C> SelectMany<A, B, C>(this InfusioOp<A> op, Func<A, InfusioOp<B>> bind, Func<A, B, C> project) =>
            op.Bind(a => bind(a).Select(b => project(a, b)));

        static InfusioOp<B> Bind<A, B>(this InfusioOp<A> op, Func<A, InfusioOp<B>> fn) =>
            op is InfusioOp<A>.Return rt ? fn(rt.Value) :
            {% for op in Operations %}op is InfusioOp<A>.{{ op.Name }} {% assign opName = forloop.index %} _{{ opName }} ? new InfusioOp<B>.{{ op.Name }}(x => _{{ opName }}.Next(x).Bind(fn){% if op.Parameters.size > 0 %}, {% endif %}{% for parameter in op.Parameters %}_{{opName}}.{{ parameter.Name | capitalize }}{% if forloop.last == false %}, {% endif %}{% endfor %}){% if forloop.last == true %} as InfusioOp<B> {% endif %} :
            {% endfor %}throw new NotSupportedException();
    }
}